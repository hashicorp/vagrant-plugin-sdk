package core

import (
	"net"

	"github.com/hashicorp/go-argmapper"
	"github.com/hashicorp/go-hclog"
	"github.com/hashicorp/go-plugin"

	"github.com/hashicorp/vagrant-plugin-sdk/internal-shared/cacher"
	"github.com/hashicorp/vagrant-plugin-sdk/internal-shared/dynamic"
	"github.com/hashicorp/vagrant-plugin-sdk/internal/pluginargs"
)

var MapperFns []*argmapper.Func

type base struct {
	Broker  *plugin.GRPCBroker
	Mappers []*argmapper.Func
	Logger  hclog.Logger
	Cleanup *pluginargs.Cleanup
	Cache   cacher.Cache
	Wrapped bool

	target net.Addr
}

// Set the cache to be used by this plugin
func (b *base) SetCache(c cacher.Cache) {
	b.Cache = c
}

// Provide access to the GRPC broker in use by this plugin
func (b *base) GRPCBroker() *plugin.GRPCBroker {
	return b.Broker
}

// This runs any registered cleanup items that may have been
// generated by the mappers (or anything else). This should
// be called when complete with the core interface in use
func (b *base) Close() error {
	return b.Cleanup.Close()
}

// Map a value to the expected type using registered mappers
// NOTE: The expected type must be a pointer, so an expected type
// of `*int` means an `int` is wanted. Expected type of `**int`
// means an `*int` is wanted, etc.
func (b *base) Map(
	resultValue, // value to be converted
	expectedType interface{}, // nil pointer of desired type
	args ...argmapper.Arg, // list of argmapper arguments
) (interface{}, error) {
	args = append(args,
		argmapper.ConverterFunc(MapperFns...),
		argmapper.ConverterFunc(b.Mappers...),
		argmapper.Typed(b.internal()),
		argmapper.Typed(b.Logger),
	)

	return dynamic.Map(resultValue, expectedType, args...)
}

// Sets a direct target which can be connected
// to when passing this client over proto.
func (b *base) SetTarget(t net.Addr) {
	b.target = t
}

// Provides the direct target being used
// by this client.
func (b *base) Target() net.Addr {
	return b.target
}

func (b *base) internal() *pluginargs.Internal {
	// if the cache isn't currently set, just create
	// a new cache instance and set it now
	if b.Cache == nil {
		b.Cache = cacher.New()
	}
	return &pluginargs.Internal{
		Broker:  b.Broker,
		Mappers: b.Mappers,
		Cache:   b.Cache,
		Cleanup: b.Cleanup,
		Logger:  b.Logger,
	}
}
