// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	core "github.com/hashicorp/vagrant-plugin-sdk/core"
	mock "github.com/stretchr/testify/mock"
)

// Vagrantfile is an autogenerated mock type for the Vagrantfile type
type Vagrantfile struct {
	mock.Mock
}

// Machine provides a mock function with given fields: name, provider, boxes, dataPath, env
func (_m *Vagrantfile) Machine(name string, provider string, boxes core.BoxCollection, dataPath string, env core.Project) (core.Machine, error) {
	ret := _m.Called(name, provider, boxes, dataPath, env)

	var r0 core.Machine
	if rf, ok := ret.Get(0).(func(string, string, core.BoxCollection, string, core.Project) core.Machine); ok {
		r0 = rf(name, provider, boxes, dataPath, env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Machine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, core.BoxCollection, string, core.Project) error); ok {
		r1 = rf(name, provider, boxes, dataPath, env)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MachineConfig provides a mock function with given fields: name, provider, boxes, dataPath, validateProvider
func (_m *Vagrantfile) MachineConfig(name string, provider string, boxes core.BoxCollection, dataPath string, validateProvider bool) (core.MachineConfig, error) {
	ret := _m.Called(name, provider, boxes, dataPath, validateProvider)

	var r0 core.MachineConfig
	if rf, ok := ret.Get(0).(func(string, string, core.BoxCollection, string, bool) core.MachineConfig); ok {
		r0 = rf(name, provider, boxes, dataPath, validateProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.MachineConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, core.BoxCollection, string, bool) error); ok {
		r1 = rf(name, provider, boxes, dataPath, validateProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MachineNames provides a mock function with given fields:
func (_m *Vagrantfile) MachineNames() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MachineNamesAndOptions provides a mock function with given fields:
func (_m *Vagrantfile) MachineNamesAndOptions() ([]string, map[string]interface{}, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func() map[string]interface{}); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PrimaryMachineName provides a mock function with given fields:
func (_m *Vagrantfile) PrimaryMachineName() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
