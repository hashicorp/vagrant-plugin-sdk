// Code generated by mockery 2.12.3. DO NOT EDIT.

package mocks

import (
	component "github.com/hashicorp/vagrant-plugin-sdk/component"
	core "github.com/hashicorp/vagrant-plugin-sdk/core"

	mock "github.com/stretchr/testify/mock"
)

// Vagrantfile is an autogenerated mock type for the Vagrantfile type
type Vagrantfile struct {
	mock.Mock
}

// GetConfig provides a mock function with given fields: namespace
func (_m *Vagrantfile) GetConfig(namespace string) (*component.ConfigData, error) {
	ret := _m.Called(namespace)

	var r0 *component.ConfigData
	if rf, ok := ret.Get(0).(func(string) *component.ConfigData); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*component.ConfigData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValue provides a mock function with given fields: path
func (_m *Vagrantfile) GetValue(path ...string) (interface{}, error) {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(...string) interface{}); ok {
		r0 = rf(path...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(path...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrimaryTargetName provides a mock function with given fields:
func (_m *Vagrantfile) PrimaryTargetName() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Target provides a mock function with given fields: name, provider
func (_m *Vagrantfile) Target(name string, provider string) (core.Target, error) {
	ret := _m.Called(name, provider)

	var r0 core.Target
	if rf, ok := ret.Get(0).(func(string, string) core.Target); ok {
		r0 = rf(name, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Target)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TargetConfig provides a mock function with given fields: name, provider, validateProvider
func (_m *Vagrantfile) TargetConfig(name string, provider string, validateProvider bool) (core.Vagrantfile, error) {
	ret := _m.Called(name, provider, validateProvider)

	var r0 core.Vagrantfile
	if rf, ok := ret.Get(0).(func(string, string, bool) core.Vagrantfile); ok {
		r0 = rf(name, provider, validateProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Vagrantfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(name, provider, validateProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TargetNames provides a mock function with given fields:
func (_m *Vagrantfile) TargetNames() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewVagrantfileT interface {
	mock.TestingT
	Cleanup(func())
}

// NewVagrantfile creates a new instance of Vagrantfile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVagrantfile(t NewVagrantfileT) *Vagrantfile {
	mock := &Vagrantfile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
