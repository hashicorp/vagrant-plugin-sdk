// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	core "github.com/hashicorp/vagrant-plugin-sdk/core"
	mock "github.com/stretchr/testify/mock"
)

// BoxMetadata is an autogenerated mock type for the BoxMetadata type
type BoxMetadata struct {
	mock.Mock
}

// Description provides a mock function with given fields:
func (_m *BoxMetadata) Description() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with given fields: pathOrURL
func (_m *BoxMetadata) Load(pathOrURL string) error {
	ret := _m.Called(pathOrURL)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pathOrURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *BoxMetadata) Name() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields: version, providers
func (_m *BoxMetadata) Version(version string, providers []string) (core.BoxVersion, error) {
	ret := _m.Called(version, providers)

	var r0 core.BoxVersion
	if rf, ok := ret.Get(0).(func(string, []string) core.BoxVersion); ok {
		r0 = rf(version, providers)
	} else {
		r0 = ret.Get(0).(core.BoxVersion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(version, providers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Versions provides a mock function with given fields: providers
func (_m *BoxMetadata) Versions(providers []string) ([]core.BoxVersion, error) {
	ret := _m.Called(providers)

	var r0 []core.BoxVersion
	if rf, ok := ret.Get(0).(func([]string) []core.BoxVersion); ok {
		r0 = rf(providers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.BoxVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(providers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
