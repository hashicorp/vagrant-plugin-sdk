// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	core "github.com/hashicorp/vagrant-plugin-sdk/core"
	mock "github.com/stretchr/testify/mock"
)

// CorePluginManager is an autogenerated mock type for the CorePluginManager type
type CorePluginManager struct {
	mock.Mock
}

// GetPlugin provides a mock function with given fields: pluginType
func (_m *CorePluginManager) GetPlugin(pluginType core.Type) (interface{}, error) {
	ret := _m.Called(pluginType)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(core.Type) interface{}); ok {
		r0 = rf(pluginType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Type) error); ok {
		r1 = rf(pluginType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewCorePluginManagerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCorePluginManager creates a new instance of CorePluginManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCorePluginManager(t NewCorePluginManagerT) *CorePluginManager {
	mock := &CorePluginManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
