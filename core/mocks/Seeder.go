// Code generated by mockery 2.12.3. DO NOT EDIT.

package mocks

import (
	core "github.com/hashicorp/vagrant-plugin-sdk/core"
	mock "github.com/stretchr/testify/mock"
)

// Seeder is an autogenerated mock type for the Seeder type
type Seeder struct {
	mock.Mock
}

// Seed provides a mock function with given fields: _a0
func (_m *Seeder) Seed(_a0 *core.Seeds) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*core.Seeds) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Seeds provides a mock function with given fields:
func (_m *Seeder) Seeds() (*core.Seeds, error) {
	ret := _m.Called()

	var r0 *core.Seeds
	if rf, ok := ret.Get(0).(func() *core.Seeds); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Seeds)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewSeederT interface {
	mock.TestingT
	Cleanup(func())
}

// NewSeeder creates a new instance of Seeder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSeeder(t NewSeederT) *Seeder {
	mock := &Seeder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
