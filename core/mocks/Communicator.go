// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	core "github.com/hashicorp/vagrant-plugin-sdk/core"
	docs "github.com/hashicorp/vagrant-plugin-sdk/docs"

	mock "github.com/stretchr/testify/mock"
)

// Communicator is an autogenerated mock type for the Communicator type
type Communicator struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *Communicator) Config() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Documentation provides a mock function with given fields:
func (_m *Communicator) Documentation() (*docs.Documentation, error) {
	ret := _m.Called()

	var r0 *docs.Documentation
	if rf, ok := ret.Get(0).(func() *docs.Documentation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docs.Documentation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Download provides a mock function with given fields: machine, source, destination
func (_m *Communicator) Download(machine core.Machine, source string, destination string) error {
	ret := _m.Called(machine, source, destination)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.Machine, string, string) error); ok {
		r0 = rf(machine, source, destination)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: machine, command, options
func (_m *Communicator) Execute(machine core.Machine, command []string, options *core.CommunicatorOptions) (int32, error) {
	ret := _m.Called(machine, command, options)

	var r0 int32
	if rf, ok := ret.Get(0).(func(core.Machine, []string, *core.CommunicatorOptions) int32); ok {
		r0 = rf(machine, command, options)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Machine, []string, *core.CommunicatorOptions) error); ok {
		r1 = rf(machine, command, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: machine
func (_m *Communicator) Init(machine core.Machine) error {
	ret := _m.Called(machine)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.Machine) error); ok {
		r0 = rf(machine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Match provides a mock function with given fields: machine
func (_m *Communicator) Match(machine core.Machine) (bool, error) {
	ret := _m.Called(machine)

	var r0 bool
	if rf, ok := ret.Get(0).(func(core.Machine) bool); ok {
		r0 = rf(machine)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Machine) error); ok {
		r1 = rf(machine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivilegedExecute provides a mock function with given fields: machine, command, options
func (_m *Communicator) PrivilegedExecute(machine core.Machine, command []string, options *core.CommunicatorOptions) (int32, error) {
	ret := _m.Called(machine, command, options)

	var r0 int32
	if rf, ok := ret.Get(0).(func(core.Machine, []string, *core.CommunicatorOptions) int32); ok {
		r0 = rf(machine, command, options)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Machine, []string, *core.CommunicatorOptions) error); ok {
		r1 = rf(machine, command, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ready provides a mock function with given fields: machine
func (_m *Communicator) Ready(machine core.Machine) (bool, error) {
	ret := _m.Called(machine)

	var r0 bool
	if rf, ok := ret.Get(0).(func(core.Machine) bool); ok {
		r0 = rf(machine)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Machine) error); ok {
		r1 = rf(machine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reset provides a mock function with given fields: machine
func (_m *Communicator) Reset(machine core.Machine) error {
	ret := _m.Called(machine)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.Machine) error); ok {
		r0 = rf(machine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Test provides a mock function with given fields: machine, command, options
func (_m *Communicator) Test(machine core.Machine, command []string, options *core.CommunicatorOptions) (bool, error) {
	ret := _m.Called(machine, command, options)

	var r0 bool
	if rf, ok := ret.Get(0).(func(core.Machine, []string, *core.CommunicatorOptions) bool); ok {
		r0 = rf(machine, command, options)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Machine, []string, *core.CommunicatorOptions) error); ok {
		r1 = rf(machine, command, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: machine, source, destination
func (_m *Communicator) Upload(machine core.Machine, source string, destination string) error {
	ret := _m.Called(machine, source, destination)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.Machine, string, string) error); ok {
		r0 = rf(machine, source, destination)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForReady provides a mock function with given fields: machine, wait
func (_m *Communicator) WaitForReady(machine core.Machine, wait int) (bool, error) {
	ret := _m.Called(machine, wait)

	var r0 bool
	if rf, ok := ret.Get(0).(func(core.Machine, int) bool); ok {
		r0 = rf(machine, wait)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Machine, int) error); ok {
		r1 = rf(machine, wait)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
