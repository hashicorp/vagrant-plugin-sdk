// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	core "github.com/hashicorp/vagrant-plugin-sdk/core"
	mock "github.com/stretchr/testify/mock"
)

// BoxCollection is an autogenerated mock type for the BoxCollection type
type BoxCollection struct {
	mock.Mock
}

// Add provides a mock function with given fields: path, name, version, metadataURL, providers
func (_m *BoxCollection) Add(path string, name string, version string, metadataURL string, providers []*core.BoxProvider) (core.Box, error) {
	ret := _m.Called(path, name, version, metadataURL, providers)

	var r0 core.Box
	if rf, ok := ret.Get(0).(func(string, string, string, string, []*core.BoxProvider) core.Box); ok {
		r0 = rf(path, name, version, metadataURL, providers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, []*core.BoxProvider) error); ok {
		r1 = rf(path, name, version, metadataURL, providers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// All provides a mock function with given fields:
func (_m *BoxCollection) All() (*core.BoxSummary, error) {
	ret := _m.Called()

	var r0 *core.BoxSummary
	if rf, ok := ret.Get(0).(func() *core.BoxSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.BoxSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clean provides a mock function with given fields: name
func (_m *BoxCollection) Clean(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: name, providers, version
func (_m *BoxCollection) Find(name string, providers []string, version string) (core.Box, error) {
	ret := _m.Called(name, providers, version)

	var r0 core.Box
	if rf, ok := ret.Get(0).(func(string, []string, string) core.Box); ok {
		r0 = rf(name, providers, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, string) error); ok {
		r1 = rf(name, providers, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
