// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	core "github.com/hashicorp/vagrant-plugin-sdk/core"
	mock "github.com/stretchr/testify/mock"

	path "github.com/hashicorp/vagrant-plugin-sdk/helper/path"
)

// BoxCollection is an autogenerated mock type for the BoxCollection type
type BoxCollection struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, name, version, metadataURL, force, providers
func (_m *BoxCollection) Add(_a0 path.Path, name string, version string, metadataURL string, force bool, providers ...string) (core.Box, error) {
	_va := make([]interface{}, len(providers))
	for _i := range providers {
		_va[_i] = providers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, name, version, metadataURL, force)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 core.Box
	if rf, ok := ret.Get(0).(func(path.Path, string, string, string, bool, ...string) core.Box); ok {
		r0 = rf(_a0, name, version, metadataURL, force, providers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(path.Path, string, string, string, bool, ...string) error); ok {
		r1 = rf(_a0, name, version, metadataURL, force, providers...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// All provides a mock function with given fields:
func (_m *BoxCollection) All() ([]core.Box, error) {
	ret := _m.Called()

	var r0 []core.Box
	if rf, ok := ret.Get(0).(func() []core.Box); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clean provides a mock function with given fields: name
func (_m *BoxCollection) Clean(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: name, version, providers
func (_m *BoxCollection) Find(name string, version string, providers ...string) (core.Box, error) {
	_va := make([]interface{}, len(providers))
	for _i := range providers {
		_va[_i] = providers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, version)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 core.Box
	if rf, ok := ret.Get(0).(func(string, string, ...string) core.Box); ok {
		r0 = rf(name, version, providers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...string) error); ok {
		r1 = rf(name, version, providers...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewBoxCollectionT interface {
	mock.TestingT
	Cleanup(func())
}

// NewBoxCollection creates a new instance of BoxCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBoxCollection(t NewBoxCollectionT) *BoxCollection {
	mock := &BoxCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
