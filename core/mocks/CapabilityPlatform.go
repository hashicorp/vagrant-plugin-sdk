// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CapabilityPlatform is an autogenerated mock type for the CapabilityPlatform type
type CapabilityPlatform struct {
	mock.Mock
}

// Capability provides a mock function with given fields: name, args
func (_m *CapabilityPlatform) Capability(name string, args ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) interface{}); ok {
		r0 = rf(name, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(name, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasCapability provides a mock function with given fields: name
func (_m *CapabilityPlatform) HasCapability(name string) (bool, error) {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewCapabilityPlatformT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCapabilityPlatform creates a new instance of CapabilityPlatform. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCapabilityPlatform(t NewCapabilityPlatformT) *CapabilityPlatform {
	mock := &CapabilityPlatform{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
