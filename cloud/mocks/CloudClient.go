// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CloudClient is an autogenerated mock type for the CloudClient type
type CloudClient struct {
	mock.Mock
}

// AuthRequest2faCode provides a mock function with given fields: username, password, delivery_method
func (_m *CloudClient) AuthRequest2faCode(username string, password string, delivery_method string) (map[string]interface{}, error) {
	ret := _m.Called(username, password, delivery_method)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string) map[string]interface{}); ok {
		r0 = rf(username, password, delivery_method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(username, password, delivery_method)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthTokenCreate provides a mock function with given fields: username, password, description, code
func (_m *CloudClient) AuthTokenCreate(username string, password string, description string, code string) (map[string]interface{}, error) {
	ret := _m.Called(username, password, description, code)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string) map[string]interface{}); ok {
		r0 = rf(username, password, description, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(username, password, description, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthTokenDelete provides a mock function with given fields:
func (_m *CloudClient) AuthTokenDelete() (map[string]interface{}, error) {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthTokenValidate provides a mock function with given fields:
func (_m *CloudClient) AuthTokenValidate() (map[string]interface{}, error) {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxCreate provides a mock function with given fields: username, name, shortDescription, description, isPrivate
func (_m *CloudClient) BoxCreate(username string, name string, shortDescription string, description string, isPrivate bool) (map[string]interface{}, error) {
	ret := _m.Called(username, name, shortDescription, description, isPrivate)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool) map[string]interface{}); ok {
		r0 = rf(username, name, shortDescription, description, isPrivate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, bool) error); ok {
		r1 = rf(username, name, shortDescription, description, isPrivate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxDelete provides a mock function with given fields: username, name
func (_m *CloudClient) BoxDelete(username string, name string) (map[string]interface{}, error) {
	ret := _m.Called(username, name)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(username, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxGet provides a mock function with given fields: username, name
func (_m *CloudClient) BoxGet(username string, name string) (map[string]interface{}, error) {
	ret := _m.Called(username, name)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(username, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxUpdate provides a mock function with given fields: username, name, shortDescription, description, isPrivate
func (_m *CloudClient) BoxUpdate(username string, name string, shortDescription string, description string, isPrivate bool) (map[string]interface{}, error) {
	ret := _m.Called(username, name, shortDescription, description, isPrivate)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool) map[string]interface{}); ok {
		r0 = rf(username, name, shortDescription, description, isPrivate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, bool) error); ok {
		r1 = rf(username, name, shortDescription, description, isPrivate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionCreate provides a mock function with given fields: username, name, version, description
func (_m *CloudClient) BoxVersionCreate(username string, name string, version string, description string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version, description)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(username, name, version, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionDelete provides a mock function with given fields: username, name, version
func (_m *CloudClient) BoxVersionDelete(username string, name string, version string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(username, name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionGet provides a mock function with given fields: username, name, version
func (_m *CloudClient) BoxVersionGet(username string, name string, version string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(username, name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionProviderCreate provides a mock function with given fields: username, name, version, provider, url, checksum, checksumType
func (_m *CloudClient) BoxVersionProviderCreate(username string, name string, version string, provider string, url string, checksum string, checksumType string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version, provider, url, checksum, checksumType)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version, provider, url, checksum, checksumType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string) error); ok {
		r1 = rf(username, name, version, provider, url, checksum, checksumType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionProviderDelete provides a mock function with given fields: username, name, version, provider
func (_m *CloudClient) BoxVersionProviderDelete(username string, name string, version string, provider string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version, provider)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(username, name, version, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionProviderGet provides a mock function with given fields: username, name, version, provider
func (_m *CloudClient) BoxVersionProviderGet(username string, name string, version string, provider string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version, provider)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(username, name, version, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionProviderUpdate provides a mock function with given fields: username, name, version, provider, url, checksum, checksumType
func (_m *CloudClient) BoxVersionProviderUpdate(username string, name string, version string, provider string, url string, checksum string, checksumType string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version, provider, url, checksum, checksumType)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version, provider, url, checksum, checksumType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string) error); ok {
		r1 = rf(username, name, version, provider, url, checksum, checksumType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionProviderUpload provides a mock function with given fields: username, name, version, provider
func (_m *CloudClient) BoxVersionProviderUpload(username string, name string, version string, provider string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version, provider)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(username, name, version, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionProviderUploadDirect provides a mock function with given fields: username, name, version, provider
func (_m *CloudClient) BoxVersionProviderUploadDirect(username string, name string, version string, provider string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version, provider)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(username, name, version, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionRelease provides a mock function with given fields: username, name, version
func (_m *CloudClient) BoxVersionRelease(username string, name string, version string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(username, name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionRevoke provides a mock function with given fields: username, name, version
func (_m *CloudClient) BoxVersionRevoke(username string, name string, version string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(username, name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxVersionUpdate provides a mock function with given fields: username, name, version, description
func (_m *CloudClient) BoxVersionUpdate(username string, name string, version string, description string) (map[string]interface{}, error) {
	ret := _m.Called(username, name, version, description)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string) map[string]interface{}); ok {
		r0 = rf(username, name, version, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(username, name, version, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationGet provides a mock function with given fields: name
func (_m *CloudClient) OrganizationGet(name string) (map[string]interface{}, error) {
	ret := _m.Called(name)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Seach provides a mock function with given fields: query, provider, sort, order, limit, page
func (_m *CloudClient) Seach(query string, provider string, sort string, order string, limit int, page int) (map[string]interface{}, error) {
	ret := _m.Called(query, provider, sort, order, limit, page)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string, int, int) map[string]interface{}); ok {
		r0 = rf(query, provider, sort, order, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, int, int) error); ok {
		r1 = rf(query, provider, sort, order, limit, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
