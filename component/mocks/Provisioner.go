// Code generated by mockery 2.12.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Provisioner is an autogenerated mock type for the Provisioner type
type Provisioner struct {
	mock.Mock
}

// CleanupFunc provides a mock function with given fields:
func (_m *Provisioner) CleanupFunc() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ConfigureFunc provides a mock function with given fields:
func (_m *Provisioner) ConfigureFunc() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ProvisionFunc provides a mock function with given fields:
func (_m *Provisioner) ProvisionFunc() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

type NewProvisionerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewProvisioner creates a new instance of Provisioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvisioner(t NewProvisionerT) *Provisioner {
	mock := &Provisioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
