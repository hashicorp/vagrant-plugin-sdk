// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: core.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/mitchellh/protostructure"
	_ "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WinrmInfo_Transport int32

const (
	WinrmInfo_NEGOTIATE WinrmInfo_Transport = 0 // default
	WinrmInfo_SSL       WinrmInfo_Transport = 1
	WinrmInfo_PLAINTEXT WinrmInfo_Transport = 2
)

// Enum value maps for WinrmInfo_Transport.
var (
	WinrmInfo_Transport_name = map[int32]string{
		0: "NEGOTIATE",
		1: "SSL",
		2: "PLAINTEXT",
	}
	WinrmInfo_Transport_value = map[string]int32{
		"NEGOTIATE": 0,
		"SSL":       1,
		"PLAINTEXT": 2,
	}
)

func (x WinrmInfo_Transport) Enum() *WinrmInfo_Transport {
	p := new(WinrmInfo_Transport)
	*p = x
	return p
}

func (x WinrmInfo_Transport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinrmInfo_Transport) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[0].Descriptor()
}

func (WinrmInfo_Transport) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[0]
}

func (x WinrmInfo_Transport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinrmInfo_Transport.Descriptor instead.
func (WinrmInfo_Transport) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1, 0}
}

type SSHInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host              string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port              string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	PrivateKeyPath    string   `protobuf:"bytes,3,opt,name=private_key_path,json=privateKeyPath,proto3" json:"private_key_path,omitempty"`
	KeysOnly          bool     `protobuf:"varint,4,opt,name=keys_only,json=keysOnly,proto3" json:"keys_only,omitempty"`
	VerifyHostKey     bool     `protobuf:"varint,5,opt,name=verify_host_key,json=verifyHostKey,proto3" json:"verify_host_key,omitempty"`
	Username          string   `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	RemoteUser        string   `protobuf:"bytes,7,opt,name=remote_user,json=remoteUser,proto3" json:"remote_user,omitempty"`
	Compression       bool     `protobuf:"varint,8,opt,name=compression,proto3" json:"compression,omitempty"`
	DsaAuthentication bool     `protobuf:"varint,9,opt,name=dsa_authentication,json=dsaAuthentication,proto3" json:"dsa_authentication,omitempty"`
	Config            string   `protobuf:"bytes,10,opt,name=config,proto3" json:"config,omitempty"`
	ExtraArgs         []string `protobuf:"bytes,11,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
	ForwardAgent      bool     `protobuf:"varint,12,opt,name=forward_agent,json=forwardAgent,proto3" json:"forward_agent,omitempty"`
	ForwardX11        bool     `protobuf:"varint,13,opt,name=forward_x11,json=forwardX11,proto3" json:"forward_x11,omitempty"`
	ForwardEnv        []string `protobuf:"bytes,14,rep,name=forward_env,json=forwardEnv,proto3" json:"forward_env,omitempty"`
	ConnectTimeout    int64    `protobuf:"varint,15,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	SshCommand        string   `protobuf:"bytes,16,opt,name=ssh_command,json=sshCommand,proto3" json:"ssh_command,omitempty"`
	ProxyCommand      string   `protobuf:"bytes,17,opt,name=proxy_command,json=proxyCommand,proto3" json:"proxy_command,omitempty"`
}

func (x *SSHInfo) Reset() {
	*x = SSHInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHInfo) ProtoMessage() {}

func (x *SSHInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHInfo.ProtoReflect.Descriptor instead.
func (*SSHInfo) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{0}
}

func (x *SSHInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SSHInfo) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SSHInfo) GetPrivateKeyPath() string {
	if x != nil {
		return x.PrivateKeyPath
	}
	return ""
}

func (x *SSHInfo) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

func (x *SSHInfo) GetVerifyHostKey() bool {
	if x != nil {
		return x.VerifyHostKey
	}
	return false
}

func (x *SSHInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SSHInfo) GetRemoteUser() string {
	if x != nil {
		return x.RemoteUser
	}
	return ""
}

func (x *SSHInfo) GetCompression() bool {
	if x != nil {
		return x.Compression
	}
	return false
}

func (x *SSHInfo) GetDsaAuthentication() bool {
	if x != nil {
		return x.DsaAuthentication
	}
	return false
}

func (x *SSHInfo) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *SSHInfo) GetExtraArgs() []string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *SSHInfo) GetForwardAgent() bool {
	if x != nil {
		return x.ForwardAgent
	}
	return false
}

func (x *SSHInfo) GetForwardX11() bool {
	if x != nil {
		return x.ForwardX11
	}
	return false
}

func (x *SSHInfo) GetForwardEnv() []string {
	if x != nil {
		return x.ForwardEnv
	}
	return nil
}

func (x *SSHInfo) GetConnectTimeout() int64 {
	if x != nil {
		return x.ConnectTimeout
	}
	return 0
}

func (x *SSHInfo) GetSshCommand() string {
	if x != nil {
		return x.SshCommand
	}
	return ""
}

func (x *SSHInfo) GetProxyCommand() string {
	if x != nil {
		return x.ProxyCommand
	}
	return ""
}

type WinrmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username            string              `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password            string              `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Host                string              `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port                int64               `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	GuestPort           int64               `protobuf:"varint,5,opt,name=guest_port,json=guestPort,proto3" json:"guest_port,omitempty"`
	MaxTries            int64               `protobuf:"varint,6,opt,name=max_tries,json=maxTries,proto3" json:"max_tries,omitempty"`
	RetryDelay          int64               `protobuf:"varint,7,opt,name=retry_delay,json=retryDelay,proto3" json:"retry_delay,omitempty"`
	Timeout             int64               `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Transport           WinrmInfo_Transport `protobuf:"varint,9,opt,name=transport,proto3,enum=hashicorp.vagrant.sdk.WinrmInfo_Transport" json:"transport,omitempty"`
	SslPeerVerification bool                `protobuf:"varint,10,opt,name=ssl_peer_verification,json=sslPeerVerification,proto3" json:"ssl_peer_verification,omitempty"`
	ExecutionTimeLimit  string              `protobuf:"bytes,11,opt,name=execution_time_limit,json=executionTimeLimit,proto3" json:"execution_time_limit,omitempty"`
	BasicAuthOnly       bool                `protobuf:"varint,12,opt,name=basic_auth_only,json=basicAuthOnly,proto3" json:"basic_auth_only,omitempty"`
	Codepage            string              `protobuf:"bytes,13,opt,name=codepage,proto3" json:"codepage,omitempty"`
}

func (x *WinrmInfo) Reset() {
	*x = WinrmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinrmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinrmInfo) ProtoMessage() {}

func (x *WinrmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinrmInfo.ProtoReflect.Descriptor instead.
func (*WinrmInfo) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1}
}

func (x *WinrmInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WinrmInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *WinrmInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *WinrmInfo) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *WinrmInfo) GetGuestPort() int64 {
	if x != nil {
		return x.GuestPort
	}
	return 0
}

func (x *WinrmInfo) GetMaxTries() int64 {
	if x != nil {
		return x.MaxTries
	}
	return 0
}

func (x *WinrmInfo) GetRetryDelay() int64 {
	if x != nil {
		return x.RetryDelay
	}
	return 0
}

func (x *WinrmInfo) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *WinrmInfo) GetTransport() WinrmInfo_Transport {
	if x != nil {
		return x.Transport
	}
	return WinrmInfo_NEGOTIATE
}

func (x *WinrmInfo) GetSslPeerVerification() bool {
	if x != nil {
		return x.SslPeerVerification
	}
	return false
}

func (x *WinrmInfo) GetExecutionTimeLimit() string {
	if x != nil {
		return x.ExecutionTimeLimit
	}
	return ""
}

func (x *WinrmInfo) GetBasicAuthOnly() bool {
	if x != nil {
		return x.BasicAuthOnly
	}
	return false
}

func (x *WinrmInfo) GetCodepage() string {
	if x != nil {
		return x.Codepage
	}
	return ""
}

type MachineState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortDescription string `protobuf:"bytes,2,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	LongDescription  string `protobuf:"bytes,3,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
}

func (x *MachineState) Reset() {
	*x = MachineState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineState) ProtoMessage() {}

func (x *MachineState) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineState.ProtoReflect.Descriptor instead.
func (*MachineState) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{2}
}

func (x *MachineState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MachineState) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *MachineState) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

type Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Machine) Reset() {
	*x = Machine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine.ProtoReflect.Descriptor instead.
func (*Machine) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3}
}

type Machine_ActionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *Machine_ActionResp) Reset() {
	*x = Machine_ActionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_ActionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_ActionResp) ProtoMessage() {}

func (x *Machine_ActionResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_ActionResp.ProtoReflect.Descriptor instead.
func (*Machine_ActionResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Machine_ActionResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Machine_ActionResp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type Machine_CommunicateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communicator *Communicator `protobuf:"bytes,3,opt,name=communicator,proto3" json:"communicator,omitempty"`
}

func (x *Machine_CommunicateResp) Reset() {
	*x = Machine_CommunicateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_CommunicateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_CommunicateResp) ProtoMessage() {}

func (x *Machine_CommunicateResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_CommunicateResp.ProtoReflect.Descriptor instead.
func (*Machine_CommunicateResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Machine_CommunicateResp) GetCommunicator() *Communicator {
	if x != nil {
		return x.Communicator
	}
	return nil
}

type Machine_GuestResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guest *Guest `protobuf:"bytes,4,opt,name=guest,proto3" json:"guest,omitempty"`
}

func (x *Machine_GuestResp) Reset() {
	*x = Machine_GuestResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_GuestResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_GuestResp) ProtoMessage() {}

func (x *Machine_GuestResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_GuestResp.ProtoReflect.Descriptor instead.
func (*Machine_GuestResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Machine_GuestResp) GetGuest() *Guest {
	if x != nil {
		return x.Guest
	}
	return nil
}

type Machine_SetIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	Err     string `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *Machine_SetIDResp) Reset() {
	*x = Machine_SetIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_SetIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_SetIDResp) ProtoMessage() {}

func (x *Machine_SetIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_SetIDResp.ProtoReflect.Descriptor instead.
func (*Machine_SetIDResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Machine_SetIDResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Machine_SetIDResp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type Machine_IndexUUIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Machine_IndexUUIDResp) Reset() {
	*x = Machine_IndexUUIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_IndexUUIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_IndexUUIDResp) ProtoMessage() {}

func (x *Machine_IndexUUIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_IndexUUIDResp.ProtoReflect.Descriptor instead.
func (*Machine_IndexUUIDResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Machine_IndexUUIDResp) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type Machine_InspectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inspect string `protobuf:"bytes,8,opt,name=inspect,proto3" json:"inspect,omitempty"`
}

func (x *Machine_InspectResp) Reset() {
	*x = Machine_InspectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_InspectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_InspectResp) ProtoMessage() {}

func (x *Machine_InspectResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_InspectResp.ProtoReflect.Descriptor instead.
func (*Machine_InspectResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Machine_InspectResp) GetInspect() string {
	if x != nil {
		return x.Inspect
	}
	return ""
}

type Machine_ReloadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Machine_ReloadResp) Reset() {
	*x = Machine_ReloadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_ReloadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_ReloadResp) ProtoMessage() {}

func (x *Machine_ReloadResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_ReloadResp.ProtoReflect.Descriptor instead.
func (*Machine_ReloadResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 6}
}

func (x *Machine_ReloadResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Machine_ConnectionInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Connection:
	//	*Machine_ConnectionInfoResp_Ssh
	//	*Machine_ConnectionInfoResp_Winrm
	Connection isMachine_ConnectionInfoResp_Connection `protobuf_oneof:"connection"`
}

func (x *Machine_ConnectionInfoResp) Reset() {
	*x = Machine_ConnectionInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_ConnectionInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_ConnectionInfoResp) ProtoMessage() {}

func (x *Machine_ConnectionInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_ConnectionInfoResp.ProtoReflect.Descriptor instead.
func (*Machine_ConnectionInfoResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 7}
}

func (m *Machine_ConnectionInfoResp) GetConnection() isMachine_ConnectionInfoResp_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (x *Machine_ConnectionInfoResp) GetSsh() *SSHInfo {
	if x, ok := x.GetConnection().(*Machine_ConnectionInfoResp_Ssh); ok {
		return x.Ssh
	}
	return nil
}

func (x *Machine_ConnectionInfoResp) GetWinrm() *WinrmInfo {
	if x, ok := x.GetConnection().(*Machine_ConnectionInfoResp_Winrm); ok {
		return x.Winrm
	}
	return nil
}

type isMachine_ConnectionInfoResp_Connection interface {
	isMachine_ConnectionInfoResp_Connection()
}

type Machine_ConnectionInfoResp_Ssh struct {
	Ssh *SSHInfo `protobuf:"bytes,4,opt,name=ssh,proto3,oneof"`
}

type Machine_ConnectionInfoResp_Winrm struct {
	Winrm *WinrmInfo `protobuf:"bytes,9,opt,name=winrm,proto3,oneof"`
}

func (*Machine_ConnectionInfoResp_Ssh) isMachine_ConnectionInfoResp_Connection() {}

func (*Machine_ConnectionInfoResp_Winrm) isMachine_ConnectionInfoResp_Connection() {}

type Machine_StateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *MachineState `protobuf:"bytes,14,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Machine_StateResp) Reset() {
	*x = Machine_StateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_StateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_StateResp) ProtoMessage() {}

func (x *Machine_StateResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_StateResp.ProtoReflect.Descriptor instead.
func (*Machine_StateResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 8}
}

func (x *Machine_StateResp) GetState() *MachineState {
	if x != nil {
		return x.State
	}
	return nil
}

type Machine_UIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,15,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Machine_UIDResp) Reset() {
	*x = Machine_UIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_UIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_UIDResp) ProtoMessage() {}

func (x *Machine_UIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_UIDResp.ProtoReflect.Descriptor instead.
func (*Machine_UIDResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 9}
}

func (x *Machine_UIDResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Machine_SyncedFoldersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Machine_SyncedFoldersResp) Reset() {
	*x = Machine_SyncedFoldersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine_SyncedFoldersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_SyncedFoldersResp) ProtoMessage() {}

func (x *Machine_SyncedFoldersResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine_SyncedFoldersResp.ProtoReflect.Descriptor instead.
func (*Machine_SyncedFoldersResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3, 10}
}

var File_core_proto protoreflect.FileDescriptor

var file_core_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x04, 0x0a, 0x07, 0x53, 0x53, 0x48,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x73,
	0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x73, 0x61, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x78, 0x31, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x58, 0x31, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x76, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x8a, 0x04, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x72, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x57, 0x69, 0x6e, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x73, 0x6c, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x73, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x32, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x53, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x02, 0x22, 0x76, 0x0a, 0x0c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x05, 0x0a, 0x07,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x1a, 0x5a, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x3f, 0x0a,
	0x09, 0x47, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x05, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x67, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x0a, 0x09, 0x53, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x23, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x1a, 0x27, 0x0a, 0x0b,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x1a, 0x1c, 0x0a, 0x0a, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x1a, 0x90, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x03, 0x73, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x53, 0x53, 0x48, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x03, 0x73, 0x73, 0x68, 0x12, 0x38,
	0x0a, 0x05, 0x77, 0x69, 0x6e, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x57, 0x69, 0x6e, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x05, 0x77, 0x69, 0x6e, 0x72, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x46, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76,
	0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1b,
	0x0a, 0x07, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x1a, 0x13, 0x0a, 0x11, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x32, 0xb9, 0x10, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x12, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76,
	0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0d, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x59, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x63,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x47, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x05, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76,
	0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x49, 0x44, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x48, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x55, 0x49, 0x44, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5f, 0x0a, 0x09, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x55, 0x55, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2c,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0b,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x5b, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12,
	0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x0a, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x59, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76,
	0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x69, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x31, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76,
	0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76,
	0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x07,
	0x55, 0x49, 0x44, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x53, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x26, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x55, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76,
	0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x67, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x30, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_proto_rawDescOnce sync.Once
	file_core_proto_rawDescData = file_core_proto_rawDesc
)

func file_core_proto_rawDescGZIP() []byte {
	file_core_proto_rawDescOnce.Do(func() {
		file_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_proto_rawDescData)
	})
	return file_core_proto_rawDescData
}

var file_core_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_core_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_core_proto_goTypes = []interface{}{
	(WinrmInfo_Transport)(0),           // 0: hashicorp.vagrant.sdk.WinrmInfo.Transport
	(*SSHInfo)(nil),                    // 1: hashicorp.vagrant.sdk.SSHInfo
	(*WinrmInfo)(nil),                  // 2: hashicorp.vagrant.sdk.WinrmInfo
	(*MachineState)(nil),               // 3: hashicorp.vagrant.sdk.MachineState
	(*Machine)(nil),                    // 4: hashicorp.vagrant.sdk.Machine
	(*Machine_ActionResp)(nil),         // 5: hashicorp.vagrant.sdk.Machine.ActionResp
	(*Machine_CommunicateResp)(nil),    // 6: hashicorp.vagrant.sdk.Machine.CommunicateResp
	(*Machine_GuestResp)(nil),          // 7: hashicorp.vagrant.sdk.Machine.GuestResp
	(*Machine_SetIDResp)(nil),          // 8: hashicorp.vagrant.sdk.Machine.SetIDResp
	(*Machine_IndexUUIDResp)(nil),      // 9: hashicorp.vagrant.sdk.Machine.IndexUUIDResp
	(*Machine_InspectResp)(nil),        // 10: hashicorp.vagrant.sdk.Machine.InspectResp
	(*Machine_ReloadResp)(nil),         // 11: hashicorp.vagrant.sdk.Machine.ReloadResp
	(*Machine_ConnectionInfoResp)(nil), // 12: hashicorp.vagrant.sdk.Machine.ConnectionInfoResp
	(*Machine_StateResp)(nil),          // 13: hashicorp.vagrant.sdk.Machine.StateResp
	(*Machine_UIDResp)(nil),            // 14: hashicorp.vagrant.sdk.Machine.UIDResp
	(*Machine_SyncedFoldersResp)(nil),  // 15: hashicorp.vagrant.sdk.Machine.SyncedFoldersResp
	(*Communicator)(nil),               // 16: hashicorp.vagrant.sdk.Communicator
	(*Guest)(nil),                      // 17: hashicorp.vagrant.sdk.Guest
	(*empty.Empty)(nil),                // 18: google.protobuf.Empty
	(*Config_ConfigureRequest)(nil),    // 19: hashicorp.vagrant.sdk.Config.ConfigureRequest
	(*FuncSpec_Args)(nil),              // 20: hashicorp.vagrant.sdk.FuncSpec.Args
	(*Config_StructResp)(nil),          // 21: hashicorp.vagrant.sdk.Config.StructResp
	(*Config_Documentation)(nil),       // 22: hashicorp.vagrant.sdk.Config.Documentation
	(*FuncSpec)(nil),                   // 23: hashicorp.vagrant.sdk.FuncSpec
}
var file_core_proto_depIdxs = []int32{
	0,  // 0: hashicorp.vagrant.sdk.WinrmInfo.transport:type_name -> hashicorp.vagrant.sdk.WinrmInfo.Transport
	16, // 1: hashicorp.vagrant.sdk.Machine.CommunicateResp.communicator:type_name -> hashicorp.vagrant.sdk.Communicator
	17, // 2: hashicorp.vagrant.sdk.Machine.GuestResp.guest:type_name -> hashicorp.vagrant.sdk.Guest
	1,  // 3: hashicorp.vagrant.sdk.Machine.ConnectionInfoResp.ssh:type_name -> hashicorp.vagrant.sdk.SSHInfo
	2,  // 4: hashicorp.vagrant.sdk.Machine.ConnectionInfoResp.winrm:type_name -> hashicorp.vagrant.sdk.WinrmInfo
	3,  // 5: hashicorp.vagrant.sdk.Machine.StateResp.state:type_name -> hashicorp.vagrant.sdk.MachineState
	18, // 6: hashicorp.vagrant.sdk.MachineService.ConfigStruct:input_type -> google.protobuf.Empty
	19, // 7: hashicorp.vagrant.sdk.MachineService.Configure:input_type -> hashicorp.vagrant.sdk.Config.ConfigureRequest
	18, // 8: hashicorp.vagrant.sdk.MachineService.Documentation:input_type -> google.protobuf.Empty
	18, // 9: hashicorp.vagrant.sdk.MachineService.ActionSpec:input_type -> google.protobuf.Empty
	20, // 10: hashicorp.vagrant.sdk.MachineService.Action:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 11: hashicorp.vagrant.sdk.MachineService.CommunicateSpec:input_type -> google.protobuf.Empty
	20, // 12: hashicorp.vagrant.sdk.MachineService.Communicate:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 13: hashicorp.vagrant.sdk.MachineService.GuestSpec:input_type -> google.protobuf.Empty
	20, // 14: hashicorp.vagrant.sdk.MachineService.Guest:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 15: hashicorp.vagrant.sdk.MachineService.SetIDSpec:input_type -> google.protobuf.Empty
	20, // 16: hashicorp.vagrant.sdk.MachineService.SetID:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 17: hashicorp.vagrant.sdk.MachineService.IndexUUIDSpec:input_type -> google.protobuf.Empty
	20, // 18: hashicorp.vagrant.sdk.MachineService.IndexUUID:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 19: hashicorp.vagrant.sdk.MachineService.InspectSpec:input_type -> google.protobuf.Empty
	20, // 20: hashicorp.vagrant.sdk.MachineService.Inspect:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 21: hashicorp.vagrant.sdk.MachineService.ReloadSpec:input_type -> google.protobuf.Empty
	20, // 22: hashicorp.vagrant.sdk.MachineService.Reload:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 23: hashicorp.vagrant.sdk.MachineService.ConnectionInfoSpec:input_type -> google.protobuf.Empty
	20, // 24: hashicorp.vagrant.sdk.MachineService.ConnectionInfo:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 25: hashicorp.vagrant.sdk.MachineService.StateSpec:input_type -> google.protobuf.Empty
	20, // 26: hashicorp.vagrant.sdk.MachineService.State:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 27: hashicorp.vagrant.sdk.MachineService.UIDSpec:input_type -> google.protobuf.Empty
	20, // 28: hashicorp.vagrant.sdk.MachineService.UID:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	18, // 29: hashicorp.vagrant.sdk.MachineService.SyncedFoldersSpec:input_type -> google.protobuf.Empty
	20, // 30: hashicorp.vagrant.sdk.MachineService.SyncedFolders:input_type -> hashicorp.vagrant.sdk.FuncSpec.Args
	21, // 31: hashicorp.vagrant.sdk.MachineService.ConfigStruct:output_type -> hashicorp.vagrant.sdk.Config.StructResp
	18, // 32: hashicorp.vagrant.sdk.MachineService.Configure:output_type -> google.protobuf.Empty
	22, // 33: hashicorp.vagrant.sdk.MachineService.Documentation:output_type -> hashicorp.vagrant.sdk.Config.Documentation
	23, // 34: hashicorp.vagrant.sdk.MachineService.ActionSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	5,  // 35: hashicorp.vagrant.sdk.MachineService.Action:output_type -> hashicorp.vagrant.sdk.Machine.ActionResp
	23, // 36: hashicorp.vagrant.sdk.MachineService.CommunicateSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	6,  // 37: hashicorp.vagrant.sdk.MachineService.Communicate:output_type -> hashicorp.vagrant.sdk.Machine.CommunicateResp
	23, // 38: hashicorp.vagrant.sdk.MachineService.GuestSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	7,  // 39: hashicorp.vagrant.sdk.MachineService.Guest:output_type -> hashicorp.vagrant.sdk.Machine.GuestResp
	23, // 40: hashicorp.vagrant.sdk.MachineService.SetIDSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	8,  // 41: hashicorp.vagrant.sdk.MachineService.SetID:output_type -> hashicorp.vagrant.sdk.Machine.SetIDResp
	23, // 42: hashicorp.vagrant.sdk.MachineService.IndexUUIDSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	9,  // 43: hashicorp.vagrant.sdk.MachineService.IndexUUID:output_type -> hashicorp.vagrant.sdk.Machine.IndexUUIDResp
	23, // 44: hashicorp.vagrant.sdk.MachineService.InspectSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	10, // 45: hashicorp.vagrant.sdk.MachineService.Inspect:output_type -> hashicorp.vagrant.sdk.Machine.InspectResp
	23, // 46: hashicorp.vagrant.sdk.MachineService.ReloadSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	11, // 47: hashicorp.vagrant.sdk.MachineService.Reload:output_type -> hashicorp.vagrant.sdk.Machine.ReloadResp
	23, // 48: hashicorp.vagrant.sdk.MachineService.ConnectionInfoSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	12, // 49: hashicorp.vagrant.sdk.MachineService.ConnectionInfo:output_type -> hashicorp.vagrant.sdk.Machine.ConnectionInfoResp
	23, // 50: hashicorp.vagrant.sdk.MachineService.StateSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	13, // 51: hashicorp.vagrant.sdk.MachineService.State:output_type -> hashicorp.vagrant.sdk.Machine.StateResp
	23, // 52: hashicorp.vagrant.sdk.MachineService.UIDSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	14, // 53: hashicorp.vagrant.sdk.MachineService.UID:output_type -> hashicorp.vagrant.sdk.Machine.UIDResp
	23, // 54: hashicorp.vagrant.sdk.MachineService.SyncedFoldersSpec:output_type -> hashicorp.vagrant.sdk.FuncSpec
	15, // 55: hashicorp.vagrant.sdk.MachineService.SyncedFolders:output_type -> hashicorp.vagrant.sdk.Machine.SyncedFoldersResp
	31, // [31:56] is the sub-list for method output_type
	6,  // [6:31] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_core_proto_init() }
func file_core_proto_init() {
	if File_core_proto != nil {
		return
	}
	file_plugin_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinrmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_ActionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_CommunicateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_GuestResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_SetIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_IndexUUIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_InspectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_ReloadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_ConnectionInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_StateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_UIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine_SyncedFoldersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_core_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Machine_ConnectionInfoResp_Ssh)(nil),
		(*Machine_ConnectionInfoResp_Winrm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_proto_goTypes,
		DependencyIndexes: file_core_proto_depIdxs,
		EnumInfos:         file_core_proto_enumTypes,
		MessageInfos:      file_core_proto_msgTypes,
	}.Build()
	File_core_proto = out.File
	file_core_proto_rawDesc = nil
	file_core_proto_goTypes = nil
	file_core_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MachineServiceClient is the client API for MachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MachineServiceClient interface {
	ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Documentation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_Documentation, error)
	ActionSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Action(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_ActionResp, error)
	CommunicateSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Communicate(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_CommunicateResp, error)
	GuestSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Guest(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_GuestResp, error)
	SetIDSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	SetID(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_SetIDResp, error)
	IndexUUIDSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	IndexUUID(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_IndexUUIDResp, error)
	InspectSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Inspect(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_InspectResp, error)
	ReloadSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Reload(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_ReloadResp, error)
	ConnectionInfoSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	ConnectionInfo(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_ConnectionInfoResp, error)
	StateSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	State(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_StateResp, error)
	UIDSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	UID(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_UIDResp, error)
	SyncedFoldersSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	SyncedFolders(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_SyncedFoldersResp, error)
}

type machineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineServiceClient(cc grpc.ClientConnInterface) MachineServiceClient {
	return &machineServiceClient{cc}
}

func (c *machineServiceClient) ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Documentation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_Documentation, error) {
	out := new(Config_Documentation)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/Documentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) ActionSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/ActionSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Action(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_ActionResp, error) {
	out := new(Machine_ActionResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) CommunicateSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/CommunicateSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Communicate(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_CommunicateResp, error) {
	out := new(Machine_CommunicateResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/Communicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) GuestSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/GuestSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Guest(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_GuestResp, error) {
	out := new(Machine_GuestResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/Guest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) SetIDSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/SetIDSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) SetID(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_SetIDResp, error) {
	out := new(Machine_SetIDResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/SetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) IndexUUIDSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/IndexUUIDSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) IndexUUID(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_IndexUUIDResp, error) {
	out := new(Machine_IndexUUIDResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/IndexUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) InspectSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/InspectSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Inspect(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_InspectResp, error) {
	out := new(Machine_InspectResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) ReloadSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/ReloadSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Reload(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_ReloadResp, error) {
	out := new(Machine_ReloadResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) ConnectionInfoSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/ConnectionInfoSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) ConnectionInfo(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_ConnectionInfoResp, error) {
	out := new(Machine_ConnectionInfoResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/ConnectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) StateSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/StateSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) State(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_StateResp, error) {
	out := new(Machine_StateResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) UIDSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/UIDSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) UID(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_UIDResp, error) {
	out := new(Machine_UIDResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/UID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) SyncedFoldersSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/SyncedFoldersSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) SyncedFolders(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Machine_SyncedFoldersResp, error) {
	out := new(Machine_SyncedFoldersResp)
	err := c.cc.Invoke(ctx, "/hashicorp.vagrant.sdk.MachineService/SyncedFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineServiceServer is the server API for MachineService service.
type MachineServiceServer interface {
	ConfigStruct(context.Context, *empty.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*empty.Empty, error)
	Documentation(context.Context, *empty.Empty) (*Config_Documentation, error)
	ActionSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	Action(context.Context, *FuncSpec_Args) (*Machine_ActionResp, error)
	CommunicateSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	Communicate(context.Context, *FuncSpec_Args) (*Machine_CommunicateResp, error)
	GuestSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	Guest(context.Context, *FuncSpec_Args) (*Machine_GuestResp, error)
	SetIDSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	SetID(context.Context, *FuncSpec_Args) (*Machine_SetIDResp, error)
	IndexUUIDSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	IndexUUID(context.Context, *FuncSpec_Args) (*Machine_IndexUUIDResp, error)
	InspectSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	Inspect(context.Context, *FuncSpec_Args) (*Machine_InspectResp, error)
	ReloadSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	Reload(context.Context, *FuncSpec_Args) (*Machine_ReloadResp, error)
	ConnectionInfoSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	ConnectionInfo(context.Context, *FuncSpec_Args) (*Machine_ConnectionInfoResp, error)
	StateSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	State(context.Context, *FuncSpec_Args) (*Machine_StateResp, error)
	UIDSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	UID(context.Context, *FuncSpec_Args) (*Machine_UIDResp, error)
	SyncedFoldersSpec(context.Context, *empty.Empty) (*FuncSpec, error)
	SyncedFolders(context.Context, *FuncSpec_Args) (*Machine_SyncedFoldersResp, error)
}

// UnimplementedMachineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMachineServiceServer struct {
}

func (*UnimplementedMachineServiceServer) ConfigStruct(context.Context, *empty.Empty) (*Config_StructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigStruct not implemented")
}
func (*UnimplementedMachineServiceServer) Configure(context.Context, *Config_ConfigureRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedMachineServiceServer) Documentation(context.Context, *empty.Empty) (*Config_Documentation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Documentation not implemented")
}
func (*UnimplementedMachineServiceServer) ActionSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionSpec not implemented")
}
func (*UnimplementedMachineServiceServer) Action(context.Context, *FuncSpec_Args) (*Machine_ActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (*UnimplementedMachineServiceServer) CommunicateSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunicateSpec not implemented")
}
func (*UnimplementedMachineServiceServer) Communicate(context.Context, *FuncSpec_Args) (*Machine_CommunicateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (*UnimplementedMachineServiceServer) GuestSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuestSpec not implemented")
}
func (*UnimplementedMachineServiceServer) Guest(context.Context, *FuncSpec_Args) (*Machine_GuestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guest not implemented")
}
func (*UnimplementedMachineServiceServer) SetIDSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIDSpec not implemented")
}
func (*UnimplementedMachineServiceServer) SetID(context.Context, *FuncSpec_Args) (*Machine_SetIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetID not implemented")
}
func (*UnimplementedMachineServiceServer) IndexUUIDSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexUUIDSpec not implemented")
}
func (*UnimplementedMachineServiceServer) IndexUUID(context.Context, *FuncSpec_Args) (*Machine_IndexUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexUUID not implemented")
}
func (*UnimplementedMachineServiceServer) InspectSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectSpec not implemented")
}
func (*UnimplementedMachineServiceServer) Inspect(context.Context, *FuncSpec_Args) (*Machine_InspectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedMachineServiceServer) ReloadSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadSpec not implemented")
}
func (*UnimplementedMachineServiceServer) Reload(context.Context, *FuncSpec_Args) (*Machine_ReloadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (*UnimplementedMachineServiceServer) ConnectionInfoSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionInfoSpec not implemented")
}
func (*UnimplementedMachineServiceServer) ConnectionInfo(context.Context, *FuncSpec_Args) (*Machine_ConnectionInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionInfo not implemented")
}
func (*UnimplementedMachineServiceServer) StateSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateSpec not implemented")
}
func (*UnimplementedMachineServiceServer) State(context.Context, *FuncSpec_Args) (*Machine_StateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (*UnimplementedMachineServiceServer) UIDSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UIDSpec not implemented")
}
func (*UnimplementedMachineServiceServer) UID(context.Context, *FuncSpec_Args) (*Machine_UIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UID not implemented")
}
func (*UnimplementedMachineServiceServer) SyncedFoldersSpec(context.Context, *empty.Empty) (*FuncSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncedFoldersSpec not implemented")
}
func (*UnimplementedMachineServiceServer) SyncedFolders(context.Context, *FuncSpec_Args) (*Machine_SyncedFoldersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncedFolders not implemented")
}

func RegisterMachineServiceServer(s *grpc.Server, srv MachineServiceServer) {
	s.RegisterService(&_MachineService_serviceDesc, srv)
}

func _MachineService_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).ConfigStruct(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Documentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Documentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/Documentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Documentation(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_ActionSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).ActionSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/ActionSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).ActionSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Action(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_CommunicateSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).CommunicateSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/CommunicateSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).CommunicateSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Communicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Communicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/Communicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Communicate(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_GuestSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).GuestSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/GuestSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).GuestSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Guest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Guest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/Guest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Guest(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_SetIDSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).SetIDSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/SetIDSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).SetIDSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_SetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).SetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/SetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).SetID(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_IndexUUIDSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).IndexUUIDSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/IndexUUIDSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).IndexUUIDSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_IndexUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).IndexUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/IndexUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).IndexUUID(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_InspectSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).InspectSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/InspectSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).InspectSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Inspect(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_ReloadSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).ReloadSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/ReloadSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).ReloadSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Reload(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_ConnectionInfoSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).ConnectionInfoSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/ConnectionInfoSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).ConnectionInfoSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_ConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).ConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/ConnectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).ConnectionInfo(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_StateSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).StateSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/StateSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).StateSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).State(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_UIDSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).UIDSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/UIDSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).UIDSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_UID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).UID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/UID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).UID(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_SyncedFoldersSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).SyncedFoldersSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/SyncedFoldersSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).SyncedFoldersSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_SyncedFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).SyncedFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.vagrant.sdk.MachineService/SyncedFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).SyncedFolders(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _MachineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.vagrant.sdk.MachineService",
	HandlerType: (*MachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigStruct",
			Handler:    _MachineService_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _MachineService_Configure_Handler,
		},
		{
			MethodName: "Documentation",
			Handler:    _MachineService_Documentation_Handler,
		},
		{
			MethodName: "ActionSpec",
			Handler:    _MachineService_ActionSpec_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _MachineService_Action_Handler,
		},
		{
			MethodName: "CommunicateSpec",
			Handler:    _MachineService_CommunicateSpec_Handler,
		},
		{
			MethodName: "Communicate",
			Handler:    _MachineService_Communicate_Handler,
		},
		{
			MethodName: "GuestSpec",
			Handler:    _MachineService_GuestSpec_Handler,
		},
		{
			MethodName: "Guest",
			Handler:    _MachineService_Guest_Handler,
		},
		{
			MethodName: "SetIDSpec",
			Handler:    _MachineService_SetIDSpec_Handler,
		},
		{
			MethodName: "SetID",
			Handler:    _MachineService_SetID_Handler,
		},
		{
			MethodName: "IndexUUIDSpec",
			Handler:    _MachineService_IndexUUIDSpec_Handler,
		},
		{
			MethodName: "IndexUUID",
			Handler:    _MachineService_IndexUUID_Handler,
		},
		{
			MethodName: "InspectSpec",
			Handler:    _MachineService_InspectSpec_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _MachineService_Inspect_Handler,
		},
		{
			MethodName: "ReloadSpec",
			Handler:    _MachineService_ReloadSpec_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _MachineService_Reload_Handler,
		},
		{
			MethodName: "ConnectionInfoSpec",
			Handler:    _MachineService_ConnectionInfoSpec_Handler,
		},
		{
			MethodName: "ConnectionInfo",
			Handler:    _MachineService_ConnectionInfo_Handler,
		},
		{
			MethodName: "StateSpec",
			Handler:    _MachineService_StateSpec_Handler,
		},
		{
			MethodName: "State",
			Handler:    _MachineService_State_Handler,
		},
		{
			MethodName: "UIDSpec",
			Handler:    _MachineService_UIDSpec_Handler,
		},
		{
			MethodName: "UID",
			Handler:    _MachineService_UID_Handler,
		},
		{
			MethodName: "SyncedFoldersSpec",
			Handler:    _MachineService_SyncedFoldersSpec_Handler,
		},
		{
			MethodName: "SyncedFolders",
			Handler:    _MachineService_SyncedFolders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}
