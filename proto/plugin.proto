syntax = "proto3";

package hashicorp.vagrant.sdk;

option go_package = ".;proto";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";
import "protostructure.proto";
import "core.proto";

/********************************************************************
* Generic Args
********************************************************************/

// Args are the common argument types that are available to many of the
// dynamic functions. The exact list of available argument types is available
// on the Go interface docs.
message Args {
  message DataDir {
    message Basis {
      string cache_dir = 1;
      string data_dir = 2;
      string root_dir = 3;
      string temp_dir = 4;
    }

    message Project {
      string cache_dir = 1;
      string data_dir = 2;
      string root_dir = 3;
      string temp_dir = 4;
    }

    message Machine {
      string cache_dir = 1;
      string data_dir = 2;
      string root_dir = 3;
      string temp_dir = 4;
    }

    message Component {
      string cache_dir = 1;
      string data_dir = 2;
      string root_dir = 3;
      string temp_dir = 4;
    }
  }

  message MachineIndex {
    message Entry {
      string id = 1;
      string local_data_path = 2;
      string name = 3;
      string provider = 4;
      string state = 5;
      string vagrantfile_name = 6;
      string vagrantfile_path = 7;
      string updated_at = 8; // TODO(spox): should we make this an int?
      Options extra_data = 9;
    }
  }

  message BoxCollection {
    string directory = 1;
  }

  message Box {
    string name = 1;
    string provider = 2;
    string version = 3;
    string directory = 4;
    Options metadata = 5;
    string metadata_url = 6;
  }

  message Environment {
    string cwd = 1;
    string data_dir = 2;
    string vagrantfile_name = 3;
    TerminalUI ui = 4;
    string home_path = 5;
    string local_data_path = 6;
    string tmp_path = 7;
    string aliases_path = 8;
    string boxes_path = 9;
    string gems_path = 10;
    string default_private_key_path = 11;
  }

  message Machine {
    string machineId = 1;
    string serverAddr = 2;
  }

  message Configuration {
    message Vagrant {
    }
    message VM {
    }
    message Provider {
    }

  }

  // LabelSet is a set of labels for anything that can be labelled, such
  // as a deployment, build, etc.
  message LabelSet {
    map<string, string> labels = 1;
  }

  message Options {
    LabelSet opt = 1;
  }

  message Vagrantfile {

  }

  // See component.JobInfo
  message JobInfo {
    bool local = 1;
    string workspace = 2;
    string id = 3;
  }

  // Logger is used to construct an logger for the plugin.
  message Logger {
    // name is the name of the logger
    string name = 1;
  }

  // TerminalUI is used to construct the terminal.UI for the plugin.
  message TerminalUI {
    uint32 stream_id = 1;
  }
}

// FuncSpec describes a function and is used by the dependency-injection
// framework to provide the function with the proper values.
//
// Value types are specified using strings. Built-in framework types
// are defined via constants in the `sdk` package. For custom types, you
// can use whatever string as long as it is unique. We recommend using a
// unique prefix plus the Go type name.
message FuncSpec {
  // name of the function. This is used for improved logging.
  string name = 1;

  // args is the list of arguments by protobuf Any types.
  repeated Value args = 2;

  // result are the resulting types that are made available. This is only
  // critically important to be set for functions that may chain to other
  // functions. It can be set to blank in which case it will not be used.
  repeated Value result = 3;

  message Value {
    // name is the name of the argument. This may be empty for typed arguments.
    string name = 1;

    // type is the type of the argument. All arguments must be encoded using
    // *any.Any so this type specifies the proto Any message type and not
    // a language-specific type.
    string type = 2;

    // value is the value for this Value. This is only expected to be set
    // for Args and has no impact on specs.
    google.protobuf.Any value = 3;
  }

  // Args is the standard argument type for an RPC that is calling a FuncSpec.
  message Args {
    // args is the list of arguments. This will include some of the
    // standard types in this file (in the Args message namespace) as well
    // as custom types declared by the FuncSpec that the plugin is expected
    // to understand how to decode.
    repeated Value args = 1;
  }
}

// Config is the namespace of messages related to configuration.
//
// All components that take configuration are expected to have two RPC calls:
//
//   * ConfigStruct - Returns the configuration structure.
//   * Configure - Sends the configuration data back to the plugin and the
//       plugin is also expected to perform any validation at this stage.
//   * Documentation - Returns a Documentation struct that details what configuration
//       is accepted, with documentation.
//
message Config {
  // ConfigureRequest is the request sent once the configuration decoding
  // is complete to actually assign the values to the structure.
  message ConfigureRequest {
    // json is the json data for the structure returned in the StructResp.
    // It is guaranteed to decode cleanly into the target structure.
    bytes json = 1;
  }

  // StructResp returns the struct for configuration.
  message StructResp {
    // struct is the configuration structure (or empty/nil if one doesn't exist).
    // This struct should have all the proper struct tags for HCL decoding
    // You should do validation on the Configure call.
    protostructure.Struct struct = 1;
  }

  message FieldDocumentation {
    string name = 1;
    string synopsis = 2;
    string summary = 3;
    bool optional = 4;
    string env_var = 5;
    string type = 6;
    string default = 7;
  }

  message MapperDocumentation {
    string input = 1;
    string output = 2;
    string description = 3;
  }

  message Documentation {
    string description = 1;
    string example = 2;
    string input = 3;
    string output = 4;
    map<string, FieldDocumentation> fields = 5;
    repeated MapperDocumentation mappers = 6;
  }
}

// Auth is the namespace of messages related to auth.
message Auth {
  // AuthResponse is returned by the Auth functions.
  message AuthResponse {
    bool authenticated = 1;
  }
}

// ImplementsResp returns true if the component implements an additional interface.
message ImplementsResp {
  bool implements = 1;
}

/********************************************************************
* Terminal UI Service
********************************************************************/

// TerminalUIService is a service that provides "sdk/terminal.UI" interface
// to plugins. Plugins don't interact with this directly, they usually
// interact with it indirectly via a terminal.UI implementation.
service TerminalUIService {
  rpc Output(TerminalUI.OutputRequest) returns (google.protobuf.Empty);
  rpc Events(stream TerminalUI.Event) returns (stream TerminalUI.Response);
  rpc IsInteractive(google.protobuf.Empty) returns (TerminalUI.IsInteractiveResponse);
}

message TerminalUI {
  message IsInteractiveResponse {
    bool interactive = 1;
  }

  message OutputRequest {
    repeated string lines = 1;
  }

  message Response {
    oneof event {
      Event.InputResp input = 1;
    }
  }

  message Event {
    oneof event {
      Line line = 1;
      Status status = 2;
      NamedValues named_values = 3;
      Raw raw = 4;
      Table table = 5;
      StepGroup step_group = 6;
      Step step = 7;
      Input input = 8;
    }

    message Input {
      string prompt = 1;
      string style = 2;
      bool secret = 3;
    }

    message InputResp {
      string input = 1;
      google.rpc.Status error = 2;
    }

    message Status {
      string status = 1;
      string msg = 2;
      bool step = 3;
    }

    message Line {
      string msg = 1;
      string style = 2;
    }

    message Raw {
      bytes data = 1;
      bool stderr = 2;
    }

    message NamedValue {
      string name = 1;
      string value = 2;
    }

    message NamedValues {
      repeated NamedValue values = 1;
    }

    message TableEntry {
      string value = 1;
      string color = 2;
    }

    message TableRow {
      repeated TableEntry entries = 1;
    }

    message Table {
      repeated string headers = 1;
      repeated TableRow rows = 2;
    }

    message StepGroup {
      bool close = 1;
    }

    message Step {
      int32 id = 1;
      bool close = 2;
      string msg = 3;
      string status = 4;
      bytes output = 5;
    }
  }
}
/********************************************************************
* Mapper Plugin
********************************************************************/

// Mapper is a specialized type of plugin that provides type mappers
// to convert to/from various types.
service Mapper {
  // ListMappers returns the list of mappers that this plugin supports.
  rpc ListMappers(google.protobuf.Empty) returns (Map.ListResponse);

  // Map executes a mapper.
  rpc Map(Map.Request) returns (Map.Response);
}

message Map {
  message Request {
    // args is the list of argument types.
    FuncSpec.Args args = 1;

    // result is the desired result type.
    string result = 2;
  }

  message Response {
    // result is the mapped data type that matches the type expected
    // by the MapRequest.result field.
    google.protobuf.Any result = 1;
  }

  message ListResponse {
    // FuncSpec
    repeated FuncSpec funcs = 1;
  }
}

// service CommunicatorService {
//   rpc Match(Communicator.MatchRequest) returns (Communicator);
// }

/********************************************************************
* Provider Plugin Service
********************************************************************/

// Provider service is a provider that takes some set of arguments changes
// the state of a machine
service ProviderService {
  // rpc IsAuthenticator(google.protobuf.Empty) returns (ImplementsResp);
  // rpc Auth(FuncSpec.Args) returns (Auth.AuthResponse);
  // rpc AuthSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ValidateAuth(FuncSpec.Args) returns (google.protobuf.Empty);
  // rpc ValidateAuthSpec(google.protobuf.Empty) returns (FuncSpec);

  // rpc Usable(google.protobuf.Empty) returns (Provider.UsableResp);
  // rpc Installed(google.protobuf.Empty) returns (Provider.InstalledResp);
  rpc Usable(FuncSpec.Args) returns (Provider.UsableResp);
  rpc UsableSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Installed(FuncSpec.Args) returns (Provider.InstalledResp);
  rpc InstalledSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Init(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc InitSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc ActionUp(FuncSpec.Args) returns (Provider.ActionResp);
  rpc ActionUpSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionHalt(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionHaltSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionSuspend(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionSuspendSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionReload(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionReloadSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionResume(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionResumeSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionProvision(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionProvisionSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionSnapshotSave(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionSnapshotSaveSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionSnapshotRestore(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionSnapshotRestoreSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionSnapshotDelete(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionSnapshotDeleteSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionDestroy(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionDestroySpec(google.protobuf.Empty) returns (FuncSpec);

  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
}

message Provider {
  message UsableResp {
    bool is_usable = 1;
  }
  message InstalledResp {
    bool is_installed = 1;
  }
  message ActionResp {
    google.protobuf.Any result = 1;
    map<string, string> labels = 2;
    bytes template_data = 3;
    bool success = 4;
  }
}

/********************************************************************
* Provisioner Plugin Service
********************************************************************/

// A Provisioner runs actions against a VM
service ProvisionerService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
}

service CommandService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
}

service CommunicatorService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc MatchSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Match(FuncSpec.Args) returns (Communicator.MatchResp);

  rpc InitSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Init(FuncSpec.Args) returns (Communicator.InitResp);

  rpc ReadySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Ready(FuncSpec.Args) returns (Communicator.ReadyResp);

  rpc WaitForReadySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc WaitForReady(FuncSpec.Args) returns (Communicator.ReadyResp);

  rpc DownloadSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Download(FuncSpec.Args) returns (Communicator.FileTransferResp);

  rpc UploadSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Upload(FuncSpec.Args) returns (Communicator.FileTransferResp);

  rpc ExecuteSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Execute(FuncSpec.Args) returns (Communicator.ExecuteResp);

  rpc PrivilegedExecuteSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc PrivilegedExecute(FuncSpec.Args) returns (Communicator.ExecuteResp);

  rpc TestSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Test(FuncSpec.Args) returns (Communicator.TestResp);

  rpc ResetSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Reset(FuncSpec.Args) returns (Communicator.ResetResp);
}

message Communicator {
  message MatchResp {
    bool match = 1;
  }

  message InitResp {}

  message ReadyResp {
    bool ready = 1;
  }

  message FileTransferResp {
  }

  message ExecutionRequest {
    Machine machine = 1;
    string command = 2;
    LabelSet options = 3;
  }

  message ExecuteResp {
    int32 exit_code = 1;
  }

  message TestResp {
    bool valid = 1;
  }

  message ResetResp {}
}

service ConfigService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
}

service GuestService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc Detect(FuncSpec.Args) returns (Guest.DetectResp);
  rpc DetectSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc HasCapability(Guest.Capability.NamedRequest) returns (Guest.Capability.CheckResp);
  rpc HasCapabilitySpec(Guest.Capability.NamedRequest) returns (FuncSpec);
  rpc Capability(Guest.Capability.NamedRequest) returns (Guest.Capability.Resp);
  rpc CapabilitySpec(Guest.Capability.NamedRequest) returns (FuncSpec);
}

message Guest {
  message DetectResp {
    bool detected = 1;
  }
  message Capability {
    message NamedRequest {
      string name = 1;
      FuncSpec.Args func_args = 2;
    }
    message CheckResp {
      bool has_capability = 1;
    }
    message Resp {
      google.protobuf.Any result = 1;
    }
  }
}

service HostService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc Detect(FuncSpec.Args) returns (Host.DetectResp);
  rpc DetectSpec(google.protobuf.Empty) returns (FuncSpec);
}

message Host {
  message DetectResp {
    bool detected = 1;
  }
  message Capability {
    message CheckResp {
      bool has_capability = 1;
    }
    message Resp {
      google.protobuf.Any result = 1;
    }
  }
}


service SyncedFolderService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
}
