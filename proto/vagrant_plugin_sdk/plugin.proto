syntax = "proto3";

package hashicorp.vagrant.sdk;

option go_package = "github.com/hashicorp/vagrant-plugin-sdk/proto/vagrant_plugin_sdk";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/rpc/status.proto";
import "protostructure.proto";

/********************************************************************
* Generic Args
********************************************************************/

// Args are the common argument types that are available to many of the
// dynamic functions. The exact list of available argument types is available
// on the Go interface docs.
message Args {
  message Seeds {
    repeated google.protobuf.Any typed = 1;
    map<string, google.protobuf.Any> named = 2;
  }

  message DataDir {
    message Basis {
      string config_dir = 1;
      string cache_dir = 2;
      string data_dir = 3;
      string temp_dir = 4;
    }

    message Project {
      string config_dir = 1;
      string cache_dir = 2;
      string data_dir = 3;
      string temp_dir = 4;
    }

    message Target {
      string config_dir = 1;
      string cache_dir = 2;
      string data_dir = 3;
      string temp_dir = 4;
    }

    message Component {
      string config_dir = 1;
      string cache_dir = 2;
      string data_dir = 3;
      string temp_dir = 4;
    }
  }

  message MetadataSet {
    map<string, string> metadata = 1;
  }

  message Path {
    string path = 1;
  }

  message Folder {
    map<string, google.protobuf.Any> folders = 1;
  }

  message TerminalUI {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message Logger {
    string name = 1;
  }

  message JobInfo {
    bool local = 1;
    string resource_id = 2;
    enum ResourceType {
      BASIS = 0;
      PROJECT = 1;
      TARGET = 2;
    }
    ResourceType resource_type = 3;
    string id = 4;
  }

  message Basis {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message Project {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message Provider {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message Target {
    // Generic target
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;

    message State {
      enum State {
        UNKNOWN = 0;
        PENDING = 1;
        CREATED = 2;
        DESTROYED = 3;
      }
      State state = 1;
    }
    // Specialized targets
    message Machine {
      message State {
        string id = 1;
        string short_description = 2;
        string long_description = 3;
      }

      uint32 stream_id = 1;
      string network = 2;
      string target = 3;
    }
  }

  message Box {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message BoxCollection {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message StateBag {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message Host {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message Guest {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message Communicator {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message SyncedFolder {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message TargetIndex {
    uint32 stream_id = 1;
    string network = 2;
    string target = 3;
  }

  message NamedCapability {
    string capability = 1;
  }

  message Direct {
    repeated google.protobuf.Any arguments = 1;
  }

  message Array {
    repeated google.protobuf.Any list = 1;
  }

  message Hash {
    map<string, google.protobuf.Any> fields = 1;
  }

  message Null {}
}

///////
    message SSHInfo {
    string host = 1;
    string port = 2;
    string private_key_path = 3;
    bool keys_only = 4;
    bool verify_host_key = 5;
    string username = 6;
    string remote_user = 7;
    bool compression = 8;
    bool dsa_authentication = 9;
    string config = 10;
    repeated string extra_args = 11;
    bool forward_agent = 12;
    bool forward_x11 = 13;
    repeated string forward_env = 14;
    int64 connect_timeout = 15;
    string ssh_command = 16;
    string proxy_command = 17;
  }

  message WinrmInfo {
    string username = 1;
    string password = 2;
    string host = 3;
    int64 port = 4;
    int64 guest_port = 5;
    int64 max_tries = 6;
    int64 retry_delay = 7;
    int64 timeout = 8;
    enum Transport {
      NEGOTIATE = 0;  // default
      SSL = 1;
      PLAINTEXT = 2;
    }
    Transport transport = 9;
    bool ssl_peer_verification = 10;
    string execution_time_limit = 11;
    bool basic_auth_only = 12;
    string codepage = 13;
  }
////////


// FuncSpec describes a function and is used by the dependency-injection
// framework to provide the function with the proper values.
//
// Value types are specified using strings. Built-in framework types
// are defined via constants in the `sdk` package. For custom types, you
// can use whatever string as long as it is unique. We recommend using a
// unique prefix plus the Go type name.
message FuncSpec {
  // name of the function. This is used for improved logging.
  string name = 1;

  // args is the list of arguments by protobuf Any types.
  repeated Value args = 2;

  // result are the resulting types that are made available. This is only
  // critically important to be set for functions that may chain to other
  // functions. It can be set to blank in which case it will not be used.
  repeated Value result = 3;

  message Value {
    // name is the name of the argument. This may be empty for typed arguments.
    string name = 1;

    // type is the type of the argument. All arguments must be encoded using
    // *any.Any so this type specifies the proto Any message type and not
    // a language-specific type.
    string type = 2;

    // value is the value for this Value. This is only expected to be set
    // for Args and has no impact on specs.
    google.protobuf.Any value = 3;
  }

  // Args is the standard argument type for an RPC that is calling a FuncSpec.
  message Args {
    // args is the list of arguments. This will include some of the
    // standard types in this file (in the Args message namespace) as well
    // as custom types declared by the FuncSpec that the plugin is expected
    // to understand how to decode.
    repeated Value args = 1;
  }
}

// Config is the namespace of messages related to configuration.
//
// All components that take configuration are expected to have two RPC calls:
//
//   * ConfigStruct - Returns the configuration structure.
//   * Configure - Sends the configuration data back to the plugin and the
//       plugin is also expected to perform any validation at this stage.
//   * Documentation - Returns a Documentation struct that details what configuration
//       is accepted, with documentation.
//
message Config {
  // ConfigureRequest is the request sent once the configuration decoding
  // is complete to actually assign the values to the structure.
  message ConfigureRequest {
    // json is the json data for the structure returned in the StructResp.
    // It is guaranteed to decode cleanly into the target structure.
    bytes json = 1;
  }

  // StructResp returns the struct for configuration.
  message StructResp {
    // struct is the configuration structure (or empty/nil if one doesn't exist).
    // This struct should have all the proper struct tags for HCL decoding
    // You should do validation on the Configure call.
    protostructure.Struct struct = 1;
  }

  message FieldDocumentation {
    string name = 1;
    string synopsis = 2;
    string summary = 3;
    bool optional = 4;
    string env_var = 5;
    string type = 6;
    string default = 7;
  }

  message MapperDocumentation {
    string input = 1;
    string output = 2;
    string description = 3;
  }

  message Documentation {
    string description = 1;
    string example = 2;
    string input = 3;
    string output = 4;
    map<string, FieldDocumentation> fields = 5;
    repeated MapperDocumentation mappers = 6;
  }
}

// Auth is the namespace of messages related to auth.
message Auth {
  // AuthResponse is returned by the Auth functions.
  message AuthResponse {
    bool authenticated = 1;
  }
}

// ImplementsResp returns true if the component implements an additional interface.
message ImplementsResp {
  bool implements = 1;
}

/********************************************************************
* Terminal UI Service
********************************************************************/

// TerminalUIService is a service that provides "sdk/terminal.UI" interface
// to plugins. Plugins don't interact with this directly, they usually
// interact with it indirectly via a terminal.UI implementation.
service TerminalUIService {
  rpc Output(TerminalUI.OutputRequest) returns (google.protobuf.Empty);
  rpc Events(stream TerminalUI.Event) returns (stream TerminalUI.Response);
  rpc IsInteractive(google.protobuf.Empty) returns (TerminalUI.IsInteractiveResponse);
}

message TerminalUI {
  message IsInteractiveResponse {
    bool interactive = 1;
  }

  message OutputRequest {
    enum Style {
      HEADER = 0;
      ERROR = 1;
      ERROR_BOLD = 2;
      WARNING = 3;
      WARNING_BOLD = 4;
      INFO = 5;
      SUCCESS = 6;
      SUCCESS_BOLD = 7;
    }
    repeated string lines = 1;
    Style style = 2;
    bool disable_new_line = 3;
  }

  message Response {
    oneof event {
      Event.InputResp input = 1;
    }
  }

  message Event {
    oneof event {
      Line line = 1;
      Status status = 2;
      NamedValues named_values = 3;
      Raw raw = 4;
      Table table = 5;
      StepGroup step_group = 6;
      Step step = 7;
      Input input = 8;
    }

    message Input {
      string prompt = 1;
      string style = 2;
      bool secret = 3;
    }

    message InputResp {
      string input = 1;
      google.rpc.Status error = 2;
    }

    message Status {
      string status = 1;
      string msg = 2;
      bool step = 3;
    }

    message Line {
      string msg = 1;
      string style = 2;
      bool disable_new_line = 3;
    }

    message Raw {
      bytes data = 1;
      bool stderr = 2;
    }

    message NamedValue {
      string name = 1;
      string value = 2;
    }

    message NamedValues {
      repeated NamedValue values = 1;
    }

    message TableEntry {
      string value = 1;
      string color = 2;
    }

    message TableRow {
      repeated TableEntry entries = 1;
    }

    message Table {
      repeated string headers = 1;
      repeated TableRow rows = 2;
    }

    message StepGroup {
      bool close = 1;
    }

    message Step {
      int32 id = 1;
      bool close = 2;
      string msg = 3;
      string status = 4;
      bytes output = 5;
    }
  }
}
/********************************************************************
* Mapper Plugin
********************************************************************/

// Mapper is a specialized type of plugin that provides type mappers
// to convert to/from various types.
service Mapper {
  // ListMappers returns the list of mappers that this plugin supports.
  rpc ListMappers(google.protobuf.Empty) returns (Map.ListResponse);

  // Map executes a mapper.
  rpc Map(Map.Request) returns (Map.Response);
}

message Map {
  message Request {
    // args is the list of argument types.
    FuncSpec.Args args = 1;

    // result is the desired result type.
    string result = 2;
  }

  message Response {
    // result is the mapped data type that matches the type expected
    // by the MapRequest.result field.
    google.protobuf.Any result = 1;
  }

  message ListResponse {
    // FuncSpec
    repeated FuncSpec funcs = 1;
  }
}

/**
 * Core plugin services
 **/

// Core State Bag //

service StateBagService {
  rpc Get(StateBag.GetRequest) returns (StateBag.GetResponse);
  rpc GetOk(StateBag.GetRequest) returns (StateBag.GetOkResponse);
  rpc Put(StateBag.PutRequest) returns (StateBag.PutResponse);
  rpc Remove(StateBag.RemoveRequest) returns (StateBag.RemoveResponse);
}

message StateBag {
  message GetRequest {
    string key = 1;
  }
  message GetResponse {
    string value = 1;
  }
  message GetOkResponse {
    bool ok = 1;
    string value = 2;
  }
  message PutRequest {
    string key = 1;
    string value = 2;
  }
  message PutResponse {}
  message RemoveRequest{
    string key = 1;
  }
  message RemoveResponse {}
}

service PluginInfoService {
  rpc ComponentTypes(google.protobuf.Empty) returns (PluginInfo.ComponentList);
  rpc Name(google.protobuf.Empty) returns (PluginInfo.Name);
}

message PluginInfo {
  message ComponentList {
    repeated uint32 component = 1;
  }
  message Name {
    string name = 1;
  }
}

/********************************************************************
* Provider Plugin Service
********************************************************************/

// Provider service is a provider that takes some set of arguments changes
// the state of a machine
service ProviderService {
  // rpc IsAuthenticator(google.protobuf.Empty) returns (ImplementsResp);
  // rpc Auth(FuncSpec.Args) returns (Auth.AuthResponse);
  // rpc AuthSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ValidateAuth(FuncSpec.Args) returns (google.protobuf.Empty);
  // rpc ValidateAuthSpec(google.protobuf.Empty) returns (FuncSpec);

  // rpc Usable(google.protobuf.Empty) returns (Provider.UsableResp);
  // rpc Installed(google.protobuf.Empty) returns (Provider.InstalledResp);
  rpc Usable(FuncSpec.Args) returns (Provider.UsableResp);
  rpc UsableSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Installed(FuncSpec.Args) returns (Provider.InstalledResp);
  rpc InstalledSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Init(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc InitSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc ActionUp(FuncSpec.Args) returns (Provider.ActionResp);
  rpc ActionUpSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionHalt(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionHaltSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionSuspend(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionSuspendSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionReload(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionReloadSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionResume(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionResumeSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionProvision(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionProvisionSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionSnapshotSave(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionSnapshotSaveSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionSnapshotRestore(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionSnapshotRestoreSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionSnapshotDelete(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionSnapshotDeleteSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ActionDestroy(FuncSpec.Args) returns (Provider.Action.Resp);
  // rpc ActionDestroySpec(google.protobuf.Empty) returns (FuncSpec);

  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
  rpc Seed(Args.Seeds) returns (google.protobuf.Empty);
  rpc Seeds(google.protobuf.Empty) returns (Args.Seeds);
}

message Provider {
  message UsableResp {
    bool is_usable = 1;
  }
  message InstalledResp {
    bool is_installed = 1;
  }
  message ActionResp {
    google.protobuf.Any result = 1;
    map<string, string> labels = 2;
    bytes template_data = 3;
    bool success = 4;
  }
}

/********************************************************************
* Provisioner Plugin Service
********************************************************************/

// A Provisioner runs actions against a VM
service ProvisionerService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
  rpc Seed(Args.Seeds) returns (google.protobuf.Empty);
  rpc Seeds(google.protobuf.Empty) returns (Args.Seeds);
}

service CommandService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
  rpc ExecuteSpec(Command.ExecuteSpecReq) returns (FuncSpec);
  rpc Execute(Command.ExecuteReq) returns (Command.ExecuteResp);
  rpc CommandInfoSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc CommandInfo(FuncSpec.Args) returns (Command.CommandInfoResp);
  rpc Seed(Args.Seeds) returns (google.protobuf.Empty);
  rpc Seeds(google.protobuf.Empty) returns (Args.Seeds);
}

message Command {
  message Flag {
    string long_name = 1;
    string short_name = 2;
    string description = 3;
    string default_value = 4;
    Type type = 5;

    enum Type {
      STRING = 0;
      BOOL = 2;
    }
  }

  message CommandInfo {
    string name = 1;
    string help = 2;
    string synopsis = 3;
    repeated Flag flags = 4;
    repeated CommandInfo subcommands = 5;
  }

  message CommandInfoResp {
    CommandInfo command_info = 1;
  }

  message ExecuteResp {
    int32 exit_code = 1;
  }

  message ExecuteReq {
    FuncSpec.Args spec = 1;
    repeated string command_args = 2;
  }

  message ExecuteSpecReq {
    repeated string command_args = 1;
  }

  message Arguments {
    message Flag {
      string name = 1;
      oneof value {
        string string = 2;
        bool bool = 3;
      }
      Type type = 4;

      enum Type {
        STRING = 0;
        BOOL = 1;
      }
    }

    repeated Flag flags = 1;
    repeated string args = 2;
  }
}

service CommunicatorService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc MatchSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Match(FuncSpec.Args) returns (Communicator.MatchResp);

  rpc InitSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Init(FuncSpec.Args) returns (google.protobuf.Empty);

  rpc ReadySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Ready(FuncSpec.Args) returns (Communicator.ReadyResp);

  rpc WaitForReadySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc WaitForReady(FuncSpec.Args) returns (Communicator.ReadyResp);

  rpc DownloadSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Download(FuncSpec.Args) returns (google.protobuf.Empty);

  rpc UploadSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Upload(FuncSpec.Args) returns (google.protobuf.Empty);

  rpc ExecuteSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Execute(FuncSpec.Args) returns (Communicator.ExecuteResp);

  rpc PrivilegedExecuteSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc PrivilegedExecute(FuncSpec.Args) returns (Communicator.ExecuteResp);

  rpc TestSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Test(FuncSpec.Args) returns (Communicator.TestResp);

  rpc ResetSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Reset(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc Seed(Args.Seeds) returns (google.protobuf.Empty);
  rpc Seeds(google.protobuf.Empty) returns (Args.Seeds);
}

message Communicator {
  message MatchResp {
    bool match = 1;
  }

  message ReadyResp {
    bool ready = 1;
  }

  message ExecuteResp {
    int32 exit_code = 1;
  }

  message TestResp {
    bool valid = 1;
  }

  message Command {
    string command = 1;
  }

  message Path {
    string path = 1;
  }

  message RemotePath {
    string path = 1;
  }
}

service ConfigService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
}

service HostService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc Detect(FuncSpec.Args) returns (Platform.DetectResp);
  rpc DetectSpec(google.protobuf.Empty) returns (FuncSpec);

  rpc Capability(Platform.Capability.NamedRequest) returns (Platform.Capability.Resp);
  rpc CapabilitySpec(Platform.Capability.NamedRequest) returns (FuncSpec);
  rpc HasCapability(FuncSpec.Args) returns (Platform.Capability.CheckResp);
  rpc HasCapabilitySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Parent(FuncSpec.Args) returns (Platform.ParentResp);
  rpc ParentSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Seed(Args.Seeds) returns (google.protobuf.Empty);
  rpc Seeds(google.protobuf.Empty) returns (Args.Seeds);
}

service GuestService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc Detect(FuncSpec.Args) returns (Platform.DetectResp);
  rpc DetectSpec(google.protobuf.Empty) returns (FuncSpec);

  rpc Capability(Platform.Capability.NamedRequest) returns (Platform.Capability.Resp);
  rpc CapabilitySpec(Platform.Capability.NamedRequest) returns (FuncSpec);
  rpc HasCapability(FuncSpec.Args) returns (Platform.Capability.CheckResp);
  rpc HasCapabilitySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Parent(FuncSpec.Args) returns (Platform.ParentResp);
  rpc ParentSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Seed(Args.Seeds) returns (google.protobuf.Empty);
  rpc Seeds(google.protobuf.Empty) returns (Args.Seeds);
}

message Platform {
  message DetectResp {
    bool detected = 1;
  }
  message ParentResp {
    string parent = 1;
  }
  message Capability {
    message NamedRequest {
      string name = 1;
      FuncSpec.Args func_args = 2;
    }
    message CheckResp {
      bool has_capability = 1;
    }
    message Resp {
      google.protobuf.Any result = 1;
    }
  }
}

service SyncedFolderService {
  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);
  rpc Usable(FuncSpec.Args) returns (SyncedFolder.UsableResp);
  rpc UsableSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Enable(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc EnableSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Disable(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc DisableSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Cleanup(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc CleanupSpec(google.protobuf.Empty) returns (FuncSpec);

  rpc Capability(Platform.Capability.NamedRequest) returns (Platform.Capability.Resp);
  rpc CapabilitySpec(Platform.Capability.NamedRequest) returns (FuncSpec);
  rpc HasCapability(FuncSpec.Args) returns (Platform.Capability.CheckResp);
  rpc HasCapabilitySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Seed(Args.Seeds) returns (google.protobuf.Empty);
  rpc Seeds(google.protobuf.Empty) returns (Args.Seeds);
}

message SyncedFolder {
  message UsableResp {
    bool usable = 1;
  }
}

/** core services **/

/********************************************************************
* Shared Messages
********************************************************************/

// Ref contains shared messages used for references to other resources.
//
// Refs should be used when the full type shouldn't be embedded in the message.
message Ref {
  // Box references a Box.
  message Box {
    string resource_id = 1;
    string name = 2;
    string version = 3;
    string provider = 4;
  }

  // References a basis configuration (analogous to VAGRANT_HOME)
  message Basis {
    string resource_id = 1;
    string path = 2;
    string name = 3;
  }

  // Represents a Project (in vagrant-agogo), an Environment (in vagrant-ruby)
  message Project {
    string resource_id = 1;
    string path = 2;
    Ref.Basis basis = 3;
    string name = 4;
  }

  // References a Target (in vagrant-ruby this is a Machine)
  message Target {
    string resource_id = 1;
    Ref.Project project = 2;
    string name = 3;
  }
}

service BasisService {
  rpc DataDir(google.protobuf.Empty) returns (Args.DataDir.Basis);
  rpc UI(google.protobuf.Empty) returns (Args.TerminalUI);
  rpc Host(google.protobuf.Empty) returns (Args.Host);
  rpc Plugins(Basis.PluginsRequest) returns (Basis.PluginsResponse);
}

message Basis {
  message PluginsRequest {
    repeated string types = 1;
  }

  message PluginsResponse {
    repeated Plugin plugins = 1;
  }

  message Plugin {
    string name = 1;
    string type = 2;
    google.protobuf.Any plugin = 3;
  }
}

/********************************************************************
* Target services
********************************************************************/
service TargetService {
  rpc ResourceId(google.protobuf.Empty) returns (Target.ResourceIdResponse);
  rpc Record(google.protobuf.Empty) returns (Target.RecordResponse);
  rpc Name(google.protobuf.Empty) returns (Target.NameResponse);
  rpc SetName(Target.SetNameRequest) returns (google.protobuf.Empty);
  rpc Project(google.protobuf.Empty) returns (Args.Project);
  rpc Metadata(google.protobuf.Empty) returns (Args.MetadataSet);
  rpc DataDir(google.protobuf.Empty) returns (Args.DataDir.Target);
  rpc State(google.protobuf.Empty) returns (Args.Target.State);
  rpc UI(google.protobuf.Empty) returns (Args.TerminalUI);
  rpc Specialize(google.protobuf.Any) returns (google.protobuf.Any);
  rpc Provider(google.protobuf.Empty) returns (Args.Provider);
  rpc ProviderName(google.protobuf.Empty) returns (Target.NameResponse);
  rpc UpdatedAt(google.protobuf.Empty) returns (Target.UpdatedAtResponse);
  rpc Communicate(google.protobuf.Empty) returns (Args.Communicator);
  rpc Save(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc SetUUID(Target.SetUUIDRequest) returns (google.protobuf.Empty);
  rpc GetUUID(google.protobuf.Empty) returns (Target.GetUUIDResponse);
  rpc Destroy(google.protobuf.Empty) returns (google.protobuf.Empty);
}

service TargetMachineService {
  // Required so a machine can properly act as a target
  rpc ResourceId(google.protobuf.Empty) returns (Target.ResourceIdResponse);
  rpc Record(google.protobuf.Empty) returns (Target.RecordResponse);
  rpc Name(google.protobuf.Empty) returns (Target.NameResponse);
  rpc SetName(Target.SetNameRequest) returns (google.protobuf.Empty);
  rpc Project(google.protobuf.Empty) returns (Args.Project);
  rpc Metadata(google.protobuf.Empty) returns (Args.MetadataSet);
  rpc DataDir(google.protobuf.Empty) returns (Args.DataDir.Target);
  rpc State(google.protobuf.Empty) returns (Args.Target.State);
  rpc UI(google.protobuf.Empty) returns (Args.TerminalUI);
  rpc Specialize(google.protobuf.Any) returns (google.protobuf.Any);
  rpc Provider(google.protobuf.Empty) returns (Args.Provider);
  rpc ProviderName(google.protobuf.Empty) returns (Target.NameResponse);
  rpc UpdatedAt(google.protobuf.Empty) returns (Target.UpdatedAtResponse);
  rpc Communicate(google.protobuf.Empty) returns (Args.Communicator);
  rpc Save(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc SetUUID(Target.SetUUIDRequest) returns (google.protobuf.Empty);
  rpc GetUUID(google.protobuf.Empty) returns (Target.GetUUIDResponse);
  rpc Destroy(google.protobuf.Empty) returns (google.protobuf.Empty);

  // Machine specific
  rpc SetID(Target.Machine.SetIDRequest) returns (google.protobuf.Empty);
  rpc GetID(google.protobuf.Empty) returns (Target.Machine.GetIDResponse);
  rpc SetState(Target.Machine.SetStateRequest) returns (google.protobuf.Empty);
  rpc GetState(google.protobuf.Empty) returns (Args.Target.Machine.State);
  rpc Box(google.protobuf.Empty) returns (Args.Box);
  rpc Guest(google.protobuf.Empty) returns (Args.Guest);
  rpc Reload(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc ConnectionInfo(google.protobuf.Empty) returns(Target.Machine.ConnectionInfoResponse);
  rpc UID(google.protobuf.Empty) returns(Target.Machine.UIDResponse);
  rpc SyncedFolders(google.protobuf.Empty) returns (Target.Machine.SyncedFoldersResponse);
}

message Target {
  message ResourceIdResponse {
    string resource_id = 1;
  }
  message RecordResponse{
    google.protobuf.Any record = 1;
  }
  message NameResponse {
    string name = 1;
  }
  message ProjectResponse {
    Ref.Project project = 1;
  }
  message SetNameRequest {
    string name = 1;
  }
  // VagrantfileName
  message VagrantfileNameResponse {
    string name = 1;
  }
  // VagrantfilePath
  message VagrantfilePathResponse {
    string path = 1;
  }
  // UpdatedAt
  message UpdatedAtResponse {
    google.protobuf.Timestamp updated_at = 1;
  }
  message GetUUIDResponse {
    string uuid = 1;
  }
  message SetUUIDRequest {
    string uuid = 1;
  }

  /**********************************************
   * Machine message used with machine service
   **********************************************/
  message Machine {
    message SetIDRequest {
      string id = 1;
    }
    message GetIDResponse {
      string id = 1;
    }
    message SetStateRequest {
      Args.Target.Machine.State state = 1;
    }
    message GetStateResponse {
      Args.Target.Machine.State state = 1;
    }
    message ConnectionInfoResponse {
      map<string, google.protobuf.Any> connection_info = 1;
    }
    message UIDResponse{
      string user_id = 1;
    }
    message SyncedFoldersResponse {
      message MachineSyncedFolder {
        Args.SyncedFolder plugin = 1;
        Vagrantfile.SyncedFolder folder = 2;
      }
      repeated MachineSyncedFolder synced_folders = 1;
    }
  }
}
/********************************************************************
* Project services
********************************************************************/
service ProjectService {
  rpc MachineNames(google.protobuf.Empty) returns (Project.MachineNamesResponse);
  rpc TargetIndex(google.protobuf.Empty) returns (Args.TargetIndex);
  // rpc ActiveMachines(google.protobuf.Empty) returns (Project.ActiveMachinesResponse);
  rpc CWD(google.protobuf.Empty) returns (Project.CwdResponse);
  rpc DataDir(google.protobuf.Empty) returns (Args.DataDir.Project);
  rpc VagrantfileName(google.protobuf.Empty) returns (Project.VagrantfileNameResponse);
  rpc VagrantfilePath(google.protobuf.Empty) returns (Project.VagrantfilePathResponse);
  rpc UI(google.protobuf.Empty) returns (Args.TerminalUI);
  rpc Home(google.protobuf.Empty) returns (Project.HomeResponse);
  rpc LocalData(google.protobuf.Empty) returns (Project.LocalDataResponse);
  rpc Tmp(google.protobuf.Empty) returns (Project.TmpResponse);
  rpc DefaultPrivateKey(google.protobuf.Empty) returns (Project.DefaultPrivateKeyResponse);
  rpc Host(google.protobuf.Empty) returns (Args.Host);
  rpc Target(Project.TargetRequest) returns (Args.Target);
  rpc TargetNames(google.protobuf.Empty) returns (Project.TargetNamesResponse);
  rpc TargetIds(google.protobuf.Empty) returns (Project.TargetIdsResponse);
  rpc Boxes(google.protobuf.Empty) returns (Args.BoxCollection);
  rpc ResourceId(google.protobuf.Empty) returns (Project.ResourceIdResponse);
}

/*******************************************************
 * Project message used with Project service
 *******************************************************/
message Project {
  message ResourceIdResponse {
    string resource_id = 1;
  }
  message TargetRequest {
    string name = 1;
  }
  message TargetNamesResponse {
    repeated string names = 1;
  }
  message TargetIdsResponse {
    repeated string ids = 1;
  }
  message MachineAndProvider {
    string name = 1;
    string provider = 2;
  }
  message MachineNamesResponse {
    repeated string names = 1;
  }
  message ActiveMachinesResponse {
    repeated MachineAndProvider machines = 1;
  }
  message CwdResponse {
    string path = 1;
  }
  message VagrantfileNameResponse {
    string name = 1;
  }
  message VagrantfilePathResponse {
    string path = 1;
  }
  message HomeResponse {
    string path = 1;
  }
  message LocalDataResponse {
    string path = 1;
  }
  message TmpResponse {
    string path = 1;
  }
  message DefaultPrivateKeyResponse {
    string key = 1;
  }
}

/********************************************************************
* Vagrantfile services
********************************************************************/
service VagrantfileService {
  rpc GetVagrantfile(Vagrantfile.GetVagrantfileRequest) returns (Vagrantfile.GetVagrantfileResponse);
  rpc Target(Vagrantfile.TargetRequest) returns (Vagrantfile.TargetResponse);
  rpc TargetConfig(Vagrantfile.TargetConfigRequest) returns (Vagrantfile.TargetConfigResponse);
  rpc TargetNames(google.protobuf.Empty) returns (Vagrantfile.TargetNamesResponse);
  rpc PrimaryTargetName(google.protobuf.Empty) returns (Vagrantfile.PrimaryTargetNameResponse);
}

/*******************************************************
 * Vagrantfile message used with Vagrantfile service
 *******************************************************/
message Vagrantfile {
  message BoxCollection {
    string directory = 1;
  }

  message GetVagrantfileRequest {
    oneof component {
      Ref.Project project = 1;
      Ref.Box box = 2;
      Ref.Basis basis = 3;
    }
  }

  message GetVagrantfileResponse {
    Vagrantfile vagrantfile = 1;
  }

  message TargetRequest {
    string name = 1;
    string provider = 2;
    BoxCollection boxes = 3;
    string data_path = 4;
    Args.Project project = 5;
  }

  message TargetResponse {
    Ref.Target target = 1;
  }

  message TargetConfigRequest {
    string name = 1;
    string provider = 2;
    BoxCollection boxes = 3;
    string data_path = 4;
    bool validate_provider = 5;
  }

  message TargetConfigResponse {
    MachineConfig target_config = 1;
  }

  message TargetNamesResponse {
    repeated string name = 1;
  }

  message PrimaryTargetNameResponse {
    string name = 1;
  }

  message ConfigVM {
    repeated string allowed_synced_folder_types = 1;
    bool allow_fstab_modification = 2;
    bool allow_hosts_modificaion = 3;
    string base_mac = 4;
    string base_address = 5;
    int32 boot_timeout = 6;
    string box = 7;
    bool ignore_box_vagrantfile = 8;
    bool box_check_update = 9;
    repeated string box_url = 10;
    string box_server_url = 11;
    string box_version = 12;
    string box_download_ca_cert = 13;
    string box_download_ca_path = 14;
    string box_download_checksum = 15;
    string box_download_checksum_type = 16;
    string box_download_client_cert = 17;
    bool box_download_insecure = 18;
    bool box_download_location_trusted = 19;
    map<string, string> box_download_options = 20;
    string communicator = 21;
    int32 graceful_halt_timeout = 22;
    string guest = 23;
    string hostname = 24;
    string post_up_message = 25;
    repeated int32 usable_port_range = 26;
    repeated string box_extra_download_options = 27;

    // TODO: CloudInit = 4 (Experimental)
    repeated Provider providers = 29;
    // TODO: Disks = 6 (Experimental)
    repeated Network networks = 31;
    repeated Provisioner provisioners = 32;
    repeated SyncedFolder synced_folders = 33;
  }

  message ConfigVagrant {
    string host = 1;
    // TODO: plugins can be a string, a hash or array
    repeated string plugins = 2;
    repeated string sensitive = 3;
  }

  message GeneralConfig {
    string type = 1;
    google.protobuf.Any config = 2;
  }

  // TODO: Review what needs to be sent here
  message MachineConfig {
    string name = 1;
    ConfigVM config_vm = 2;
    ConfigVagrant config_vagrant = 3;
    repeated GeneralConfig plugin_configs = 4;
  }

  message Provisioner {
    string name = 1;
    string type = 2;
    string before = 3;
    string after = 4;
    bool communicator_required = 5;
    // A Provisioner plugin defines it's own configuration,
    // that gets added in here
    google.protobuf.Any config = 6;
  }

  message Provider {
    string type = 1;
    google.protobuf.Any config = 2;
  }

  message Network {
    string type = 1;
    string id = 2;
    google.protobuf.Any config = 3;
  }

  message SyncedFolder {
    string source = 1;
    string destination = 2;
    // A SyncedFolder plugin defines it's own configuration,
    // that gets added in here
    google.protobuf.Any config = 3;

    bool create = 4;
    bool disabled = 5;
    string group = 6;
    string id = 7;
    repeated string mount_options = 8;
    string owner = 9;
    string type = 10;
  }

  // TODO: Review what needs to be sent here
  message Vagrantfile {
    // The full path the the Vagrantfile including the Vagrantfile name
    string path = 1;
    string raw = 2;
    string current_version = 3;
    repeated MachineConfig machine_configs = 4;
  }
}

/********************************************************************
* TargetIndex services
********************************************************************/
service TargetIndexService {
  rpc Delete(TargetIndex.TargetIdentifier) returns (google.protobuf.Empty);
  rpc Get(TargetIndex.TargetIdentifier) returns (Args.Target);
  rpc Includes(TargetIndex.TargetIdentifier) returns (TargetIndex.IncludesResponse);
  rpc Set(Args.Target) returns (Args.Target);
  rpc All(google.protobuf.Empty) returns (TargetIndex.AllResponse);
}

/*******************************************************
 * TargetIndex message used with TargetIndex service
 *******************************************************/
message TargetIndex {
  message TargetIdentifier {
    string id = 1;
  }

  message AllResponse {
    repeated Args.Target targets = 1;
  }

  message IncludesResponse {
    bool exists = 1;
  }
}


/********************************************************************
* Box services
********************************************************************/
service BoxService {
  rpc AutomaticUpdateCheckAllowed(google.protobuf.Empty) returns (Box.AutomaticUpdateCheckAllowedResponse);
  rpc Destroy(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc HasUpdate(Box.HasUpdateRequest) returns (Box.HasUpdateResponse);
  rpc InUse(Args.TargetIndex) returns (Box.InUseResponse);
  rpc Repackage(Args.Path) returns (google.protobuf.Empty);

  rpc Directory(google.protobuf.Empty) returns (Args.Path);
  rpc Metadata(google.protobuf.Empty) returns (Args.MetadataSet);
  rpc MetadataURL(google.protobuf.Empty) returns (Box.MetadataUrlResponse);
  rpc Name(google.protobuf.Empty) returns (Box.NameResponse);
  rpc Provider(google.protobuf.Empty) returns (Box.ProviderResponse);
  rpc Version(google.protobuf.Empty) returns (Box.VersionResponse);

  rpc Compare(Args.Box) returns (Box.EqualityResponse);
}

/*******************************************************
 * Box message used with Box service
 *******************************************************/
message Box {
  message AutomaticUpdateCheckAllowedResponse {
    bool allowed = 1;
  }

  message HasUpdateRequest {
    string version = 1;
  }

  message HasUpdateResponse {
    bool has_update = 1;
  }

  message InUseResponse {
    bool in_use = 1;
  }

  message MetadataUrlResponse {
    string metadataUrl = 1;
  }

  message NameResponse {
    string name = 1;
  }

  message ProviderResponse {
    string provider = 1;
  }

  message VersionResponse {
    string version = 1;
  }

  // Returns -1, 0, or 1 if this version is smaller, equal,
  // or larger than the other version, respectively.
  message EqualityResponse {
    int32 result = 1;
  }
}


/********************************************************************
* BoxCollecion services
********************************************************************/
service BoxCollectionService {
  rpc Add(BoxCollection.AddRequest) returns (Args.Box);
  rpc All(google.protobuf.Empty) returns (BoxCollection.AllResponse);
  rpc Clean(BoxCollection.CleanRequest) returns (google.protobuf.Empty);
  rpc Find(BoxCollection.FindRequest) returns (Args.Box);
}

/*******************************************************
 * BoxCollection messages used with BoxCollection service
 *******************************************************/
message BoxCollection {
  message AddRequest {
    string path = 1;
    string name = 2;
    string version = 3;
    string metadataUrl = 4;
    bool force = 5;
    repeated string providers = 6;
  }

  message AllResponse {
    repeated Args.Box boxes = 1;
  }

  message CleanRequest {
    string name = 1;
  }

  message FindRequest {
    string name = 1;
    string version = 2;
    repeated string providers = 3;
  }
}
